<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yunsaijc&#39;s Blog</title>
    <link>http://yunsaijc.top/</link>
    
    <atom:link href="http://yunsaijc.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Enjoy</description>
    <pubDate>Mon, 25 Sep 2023 07:29:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HTB-sau Walkthrough</title>
      <link>http://yunsaijc.top/2023/09/17/7-HTB-sau-Walkthrough/</link>
      <guid>http://yunsaijc.top/2023/09/17/7-HTB-sau-Walkthrough/</guid>
      <pubDate>Sun, 17 Sep 2023 02:10:19 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;运行环境：macOS 13.2.1; Parallel Desktop: Kali Linux 2022.2 ARM64; Windows 11&lt;/p&gt;
&lt;p&gt;靶机链接：&lt;a href=&quot;https://app.hackthebox.com/mac</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>运行环境：macOS 13.2.1; Parallel Desktop: Kali Linux 2022.2 ARM64; Windows 11</p><p>靶机链接：<a href="https://app.hackthebox.com/machines/Sau">https://app.hackthebox.com/machines/Sau</a></p></blockquote><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>基础的四项扫描：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/1.png" class=""><p>在端口扫描时，采用默认的<code>-sS</code>方式，能够扫到<code>-sT</code>方式扫不到的80和8338端口：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/2.png" class=""><img src="/2023/09/17/7-HTB-sau-Walkthrough/3.png" class=""><img src="/2023/09/17/7-HTB-sau-Walkthrough/4.png" class=""><p>扫描完成后， 进行子目录爆破：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/6.png" class=""><p>进入<code>hostname/web/</code>，发现是一个<code>request basket</code> 的Web应用，可以收集各种请求：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/7.png" class=""><p>创建一个名为<code>sau</code>的basket：</p><p>搜索发现该应用存在一个SSRF漏洞<code>CVE-2023-27163</code>：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/9.png" class=""><p>尝试使用网上的脚本进行利用，但没有成功：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/10.png" class=""><p>不再尝试网上的poc，继续往下进行。</p><p>搜索发现这是一个类似于代理的应用。在设置中可以设置目标的URL。将访问<code>http://hostname/sau</code>的主机记为主机A（攻击机），主机A想要访问的主机记为主机B。<br><code>Forward URL</code>是需要转发到的地址，即主机B地址；<br><code>Proxy Response</code>勾选后，主机B的响应会发送回主机A；<br><code>Expand Forward</code>勾选后，主机A访问时扩展的部分会被添到<code>Forward URL</code>的后面。如：主机A访问<code>http://hostname/sau/login</code>，如果勾选该项，那么实际访问的就是<code>&#123;Forward URL&#125;/login</code>；否则就是<code>&#123;Forward URL&#125;</code>，后面的<code>/login</code>是无效的。<br>此处务必要注意勾选后面两个！否则后续的步骤不成立！</p><p>在端口扫描过程中发现了一个80端口，但不对外开放。此处将目标URL设为服务器本地地址的80端口进行尝试：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/11.png" class=""><p>设置完成后访问<code>http://hostname/sau</code>，是一个名为<code>Maltrail</code>的恶意流量监测应用。搜索其漏洞：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/12.png" class=""><p>下载poc镜像到本地，利用成功。获得shell：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/13.png" class=""><p>获得userflag：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/14.png" class=""><p>通过<code>sudo -l</code>查看权限后，在GTFOBins查找提权方法并进行提权：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/15.png" class=""><p>获得systemflag：</p><img src="/2023/09/17/7-HTB-sau-Walkthrough/16.png" class=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Request-basket存在SSRF，可以访问服务器本地的80端口</li><li>Maltrail自身存在漏洞</li></ol>]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</category>
      
      
      <category domain="http://yunsaijc.top/tags/HTB/">HTB</category>
      
      <category domain="http://yunsaijc.top/tags/RedTeam/">RedTeam</category>
      
      
      <comments>http://yunsaijc.top/2023/09/17/7-HTB-sau-Walkthrough/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTB-cozyhosting Walkthrough</title>
      <link>http://yunsaijc.top/2023/09/10/6-HTB-cozyhosting-Walkthrough/</link>
      <guid>http://yunsaijc.top/2023/09/10/6-HTB-cozyhosting-Walkthrough/</guid>
      <pubDate>Sun, 10 Sep 2023 01:58:56 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;运行环境：macOS 13.2.1; Parallel Desktop: Kali Linux 2022.2 ARM64; Windows 11&lt;/p&gt;
&lt;p&gt;靶机链接：Seasonal靶机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;过程</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>运行环境：macOS 13.2.1; Parallel Desktop: Kali Linux 2022.2 ARM64; Windows 11</p><p>靶机链接：Seasonal靶机</p></blockquote><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>在<code>/etc/hosts</code>中添加域名DNS后，使用<code>dirsearch</code>进行子目录爆破：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/1.png" class=""><p>访问<code>/actuator</code>，这是<code>spring</code>框架下的一个组件：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/2.png" class="" title="截屏2023-09-04 22.24.05"><p>查看<code>/actuator/sessions</code>可以获得该站点的<code>SESSIONID</code>，其中<code>jq</code>命令用于处理JSON数据：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/3.png" class="" title="截屏2023-09-05 10.17.15"><p>在登录页面输入，提交后抓包修改<code>SESSIONID</code>。此后每一个数据包均对<code>SESSIONID</code>进行修改，即可登录admin页面</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/4.png" class="" title="截屏2023-09-05 10.18.02"><p>登录admin页面后发现存在两处输入框。其中<code>username</code>参数存在RCE，尝试反弹shell：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/5.png" class="" title="截屏2023-09-05 11.06.24"><p>上述方式没有成功，尝试使用curl方式反弹shell。在kali的<code>/var/www/html</code>目录下创建脚本文件，并打开apache服务：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/6.png" class="" title="截屏2023-09-05 11.14.47"><p>使用curl命令反弹shell，可以发现已经成功立足：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/7.png" class="" title="截屏2023-09-05 11.15.07"><p>查看当前目录，发现存在一个jar文件。尝试scp方式，但服务器未开启ssh服务。转而使用python开启服务：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/8.png" class="" title="截屏2023-09-06 09.09.31"><p>从而在kali上可以下载到该文件：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/9.png" class="" title="截屏2023-09-06 09.09.37"><p>审阅该文件发现存在数据库的登录信息：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/10.png" class="" title="截屏2023-09-06 09.25.10"><p>还可以使用如下命令，无需打开jar包，直接对敏感信息进行查找：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/11.png" class="" title="截屏2023-09-06 09.32.13"><p>使用该登录信息登录数据库，查看现有数据库并切换到<code>cozyhosting</code>数据库：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/12.png" class="" title="截屏2023-09-06 10.19.45"><p>查看现有表，并查看<code>users</code>表中的内容，获得两个登录密码的哈希值：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/13.png" class="" title="截屏2023-09-06 10.22.05"><p>使用<code>john</code>破解得到某一用户的登录密码：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/14.png" class="" title="截屏2023-09-06 11.53.02"><p>查看<code>/home</code>目录，以查看登录所需的用户名：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/15.png" class="" title="截屏2023-09-06 11.53.57"><p>使用<code>josh</code>用户和破解得到的密码进行ssh登录：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/16.png" class="" title="截屏2023-09-06 11.54.40"><p>得到userflag：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/17.png" class="" title="截屏2023-09-06 11.57.22"><p>查看当前用户权限，可以免密以root身份运行ssh：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/18.png" class="" title="截屏2023-09-06 11.59.35"><p>在GTFOBins查找提权命令：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/19.png" class="" title="截屏2023-09-06 12.01.23"><p>提权成功，获得systemflag：</p><img src="/2023/09/10/6-HTB-cozyhosting-Walkthrough/20.png" class="" title="截屏2023-09-06 12.06.06"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>spring框架下的actuator组件，存在敏感信息泄漏漏洞。<br>从而导致session会话劫持攻击</li><li>admin页面存在RCE漏洞</li><li>jar包存在敏感信息泄漏漏洞</li></ol>]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</category>
      
      
      <category domain="http://yunsaijc.top/tags/HTB/">HTB</category>
      
      <category domain="http://yunsaijc.top/tags/RedTeam/">RedTeam</category>
      
      
      <comments>http://yunsaijc.top/2023/09/10/6-HTB-cozyhosting-Walkthrough/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTB-keeper Walkthrough</title>
      <link>http://yunsaijc.top/2023/09/07/5-HTB-keeper-Walkthrough/</link>
      <guid>http://yunsaijc.top/2023/09/07/5-HTB-keeper-Walkthrough/</guid>
      <pubDate>Thu, 07 Sep 2023 02:03:54 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;运行环境：macOS 13.2.1; Parallel Desktop: Kali Linux 2022.2 ARM64; Windows 11&lt;/p&gt;
&lt;p&gt;靶机链接：&lt;a href=&quot;https://app.hackthebox.com/mac</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>运行环境：macOS 13.2.1; Parallel Desktop: Kali Linux 2022.2 ARM64; Windows 11</p><p>靶机链接：<a href="https://app.hackthebox.com/machines/Keeper">https://app.hackthebox.com/machines/Keeper</a></p></blockquote><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>首先进行4项基本扫描：端口扫描，详细信息扫描，UDP扫描，漏洞扫描</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/1.png" class=""><p>发现22和80端口开放：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/2.png" class=""><img src="/2023/09/07/5-HTB-keeper-Walkthrough/3.png" class=""><img src="/2023/09/07/5-HTB-keeper-Walkthrough/4.png" class=""><p>访问Web页面：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/5.png" class=""><p>在<code>/etc/hosts</code>中添加ip和域名：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/6.png" class=""><p>访问前面提到的域名，是一个登录页面。查看该开源项目(RT)的源码可以得到默认的用户名和密码<code>root:password</code>，尝试登录：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/7.png" class=""><p>成功登录之后，找到某个用户的用户名和密码信息：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/8.png" class=""><p>使用上述信息尝试ssh登录，成功。获得userflag：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/9.png" class=""><p>解压<code>RT30000.zip</code>后发现是有关Keepass的两个文件。通过搜索引擎找到该软件的漏洞<code>CVE-2023-32784</code>：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/10.png" class=""><p>找到该漏洞的poc：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/11.png" class=""><p>通过scp将该poc上传到服务器并执行，获得可能的Keepass主密码，但难以辨认其中的字符：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/12.png" class=""><p>OCR之后搜索一下首个字符串，发现是某道菜名：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/13.png" class=""><p>将服务器上的<code>kdbx</code>文件下载到本地：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/14.png" class=""><p>打开<code>kdbx</code>文件，将该菜名作为主密码登录（注意首字母改成小写）：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/15.png" class=""><p>获得一个密码和一个<code>putty</code>文件的内容。将该密码作为<code>root</code>用户的密码ssh登录失败，可能是因为没有开启密码登录：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/16.png" class=""><p>将<code>putty</code>文件的内容保存为<code>ppk</code>文件：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/17.png" class=""><p>通过命令<code>putty -i ./putty.ppk</code>指定该文件，并打开putty，登录服务器：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/18.png" class=""><p>可以看到能够直接以<code>root</code>用户身份登录，获得systemflag：</p><img src="/2023/09/07/5-HTB-keeper-Walkthrough/19.png" class=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>应用RT框架时存在弱密码漏洞（使用默认密码）</li><li>Keepass自身存在漏洞</li></ol>]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</category>
      
      
      <category domain="http://yunsaijc.top/tags/HTB/">HTB</category>
      
      <category domain="http://yunsaijc.top/tags/RedTeam/">RedTeam</category>
      
      
      <comments>http://yunsaijc.top/2023/09/07/5-HTB-keeper-Walkthrough/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>联邦学习+差分隐私项目记录</title>
      <link>http://yunsaijc.top/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</link>
      <guid>http://yunsaijc.top/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</guid>
      <pubDate>Sun, 08 Jan 2023 05:44:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;本项目为联邦学习+差分隐私的实现(暂且记为myFed)。支持同步、异步、半异步（默认）机制。&lt;/p&gt;
&lt;p&gt;项目仓库：&lt;a href=&quot;https://github.com/yunsaijc/2023-Federated-Learning-and-Differential-</description>
        
      
      
      
      <content:encoded><![CDATA[<p>本项目为联邦学习+差分隐私的实现(暂且记为myFed)。支持同步、异步、半异步（默认）机制。</p><p>项目仓库：<a href="https://github.com/yunsaijc/2023-Federated-Learning-and-Differential-Privacy">https://github.com/yunsaijc/2023-Federated-Learning-and-Differential-Privacy</a></p><p>本代码基于以下仓库实现：<a href="https://github.com/wenzhu23333/Differential-Privacy-Based-Federated-Learning">https://github.com/wenzhu23333/Differential-Privacy-Based-Federated-Learning</a></p><p>主要参考文献：</p><blockquote><p>FedSA: A Semi-Asynchronous Federated Learning Mechanism in Heterogeneous Edge Computing</p><p>Federated Learning With Differential Privacy: Algorithms and Performance Analysis</p></blockquote><h2 id="重要参数定义与说明"><a href="#重要参数定义与说明" class="headerlink" title="重要参数定义与说明"></a>重要参数定义与说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">M//每一轮参与全局训练的客户数量</span><br><span class="line">N//客户数量</span><br><span class="line">K//全局更新的轮数</span><br><span class="line">tau//陈旧度</span><br><span class="line">epsilon//隐私预算</span><br></pre></td></tr></table></figure><h2 id="项目目的"><a href="#项目目的" class="headerlink" title="项目目的"></a>项目目的</h2><p>本项目主要目的是学习理解联邦学习的工作过程。探究联邦学习加上差分隐私后的效果；同时考察在半异步机制下，不同M值对于准确率和收敛时间带来的影响。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>项目文件结构及说明如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">myFed</span><br><span class="line">│  myFed.py//项目main文件</span><br><span class="line">│  requirements.txt//依赖包与版本</span><br><span class="line">│</span><br><span class="line">├─data//存放数据集文件</span><br><span class="line">├─log//代码运行记录</span><br><span class="line">├─models//网络模型相关文件</span><br><span class="line">│  │  Fed.py        //全局更新函数</span><br><span class="line">│  │  Nets.py       //网络模型定义函数</span><br><span class="line">│  │  test.py       //测试准确率函数</span><br><span class="line">│  │  Update.py     //本地更新函数</span><br><span class="line">│</span><br><span class="line">├─utils//存放一些使用到的函数</span><br><span class="line">│  │  dataset.py            //数据集有关函数</span><br><span class="line">│  │  dp_mechanism.py       //与dp有关的函数</span><br><span class="line">│  │  Functions.py          //其他函数</span><br><span class="line">│  │  language_utils.py     //与特定语言模型有关的函数</span><br><span class="line">│  │  options.py            //命令行参数设置函数</span><br><span class="line">│  │  sampling.py           //数据集划分函数</span><br></pre></td></tr></table></figure><h2 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h2><p>本项目中，我进行了多次实验。各个实验设置如下：（数据分布：IID/Non-IID；数据集：MNIST/CIFAR-10）</p><ol><li>半异步机制联邦学习+差分隐私，设置不同N值。</li><li>半异步机制联邦学习+差分隐私，设置不同M值。</li><li>五种机制对比：myFed, FedSA, FedAsync, FedAP, FedAF；</li></ol><h2 id="实验结果分析"><a href="#实验结果分析" class="headerlink" title="实验结果分析"></a>实验结果分析</h2><h3 id="1-设置不同N值"><a href="#1-设置不同N值" class="headerlink" title="1. 设置不同N值"></a>1. 设置不同N值</h3><p>在不同的N值之下，各个客户端陈旧度的最大值随着N值的增大而增加。如下图所示：</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/tau_iid_CNN_MNIST-16731516267212.png" class=""><h3 id="2-设置不同M值"><a href="#2-设置不同M值" class="headerlink" title="2. 设置不同M值"></a>2. 设置不同M值</h3><p>令N的值固定，变量为M的值。在IID数据集下的实验结果如下图所示（图例中的值为$\frac{M}{N}$）。可以发现，当M的值较小时，收敛速度更快，并且准确率也有略微的领先。</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/4_acc_iid_CNN_MNIST.png" class=""><p>在Non-IID数据集下的实验结果如下图所示。可以发现，当数据分布为Non-IID时，仍然是M的值较小时，准确率上升地更快；但是M较小时的准确率波动程度较大，甚至会无法收敛；而M的值较大时虽然准确率上升更慢，但准确率是较为稳定，并且能够收敛的。</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/4_acc_N-iid_CNN_MNIST.png" class=""><h3 id="3-五种机制对比"><a href="#3-五种机制对比" class="headerlink" title="3. 五种机制对比"></a>3. 五种机制对比</h3><p>本实验将myFed(半异步), FedSA(半异步), FedAsync(异步), FedAP(同步), FedAF(同步)五种机制的性能进行了对比。</p><p>MNIST数据集，IID分布下。</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/acc_iid_CNN_MNIST.png" class=""><p>MNIST数据集，Non-IID分布下。</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/acc_N-iid_CNN_MNIST.png" class=""><p>CIFAR-10数据集，IID分布下。</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/acc_iid_CNN_CIFAR.png" class=""><p>CIFAR-10数据集，Non-IID分布下。</p><img src="/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/acc_N-iid_CNN_CIFAR.png" class=""><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>Q. Ma, Y. Xu, H. Xu, Z. Jiang, L. Huang and H. Huang, “FedSA: A Semi-Asynchronous Federated Learning Mechanism in Heterogeneous Edge Computing,” in IEEE Journal on Selected Areas in Communications, vol. 39, no. 12, pp. 3654-3672, Dec. 2021, doi: 10.1109/JSAC.2021.3118435.</p><p>K. Wei et al., “Federated Learning With Differential Privacy: Algorithms and Performance Analysis,” in IEEE Transactions on Information Forensics and Security, vol. 15, pp. 3454-3469, 2020, doi: 10.1109/TIFS.2020.2988575.</p><p><a href="https://blog.csdn.net/qq_36018871/article/details/121361027">https://blog.csdn.net/qq_36018871/article/details/121361027</a></p><p><a href="https://zhuanlan.zhihu.com/p/263959892?utm_source=wechat_session">https://zhuanlan.zhihu.com/p/263959892?utm_source=wechat_session</a></p><p><a href="https://blog.csdn.net/m0_54487794/article/details/121674633">https://blog.csdn.net/m0_54487794/article/details/121674633</a></p><p><a href="https://blog.csdn.net/wenzhu2333/article/details/124556920?spm=1001.2014.3001.5501">https://blog.csdn.net/wenzhu2333/article/details/124556920?spm=1001.2014.3001.5501</a></p><p><a href="https://zhuanlan.zhihu.com/p/348290670">https://zhuanlan.zhihu.com/p/348290670</a></p><p><a href="https://blog.csdn.net/Lyn_S/article/details/119661088">https://blog.csdn.net/Lyn_S/article/details/119661088</a></p><p><a href="https://www.zhihu.com/question/354819140">https://www.zhihu.com/question/354819140</a></p><p><a href="https://zhuanlan.zhihu.com/p/142597513">https://zhuanlan.zhihu.com/p/142597513</a></p><p><a href="https://blog.csdn.net/qq_41769289/article/details/87694955">https://blog.csdn.net/qq_41769289/article/details/87694955</a></p><p><a href="https://blog.fangzhou.me/posts/20190224-gradient-descent/#l-smooth-and-%CE%BC-strongly-convex-function">https://blog.fangzhou.me/posts/20190224-gradient-descent/#l-smooth-and-%CE%BC-strongly-convex-function</a></p><p><a href="https://blog.fangzhou.me/posts/20190217-convex-function-lipschitz-smooth-strongly-convex/#strongly-convex">https://blog.fangzhou.me/posts/20190217-convex-function-lipschitz-smooth-strongly-convex/#strongly-convex</a></p><p><a href="https://blog.csdn.net/qsczse943062710/article/details/76423509">https://blog.csdn.net/qsczse943062710/article/details/76423509</a></p><p><a href="https://blog.csdn.net/qq_42589613/article/details/110296048">https://blog.csdn.net/qq_42589613/article/details/110296048</a></p><p><a href="https://blog.csdn.net/PanYHHH/article/details/107361827">https://blog.csdn.net/PanYHHH/article/details/107361827</a></p><p><a href="https://zhuanlan.zhihu.com/p/40761721">https://zhuanlan.zhihu.com/p/40761721</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</category>
      
      
      <category domain="http://yunsaijc.top/tags/Python/">Python</category>
      
      <category domain="http://yunsaijc.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="http://yunsaijc.top/tags/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/">联邦学习</category>
      
      <category domain="http://yunsaijc.top/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/">神经网络</category>
      
      <category domain="http://yunsaijc.top/tags/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/">差分隐私</category>
      
      <category domain="http://yunsaijc.top/tags/CNN/">CNN</category>
      
      
      <comments>http://yunsaijc.top/2023/01/08/4-%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0+%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Django+Vue 项目记录</title>
      <link>http://yunsaijc.top/2022/12/09/3-Django+Vue/</link>
      <guid>http://yunsaijc.top/2022/12/09/3-Django+Vue/</guid>
      <pubDate>Fri, 09 Dec 2022 14:37:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;技术栈：Vue + Django + MySQL&lt;/p&gt;
&lt;p&gt;IDE：Pycharm&lt;/p&gt;
&lt;p&gt;本项目为2022秋北航网络空间安全学院数据库实验课程作业。作业需要进行简单的全栈开发。时间紧迫，且本人初次接触Vue，过程中遇到了许多问题。在此记录项目的开发过程。&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>技术栈：Vue + Django + MySQL</p><p>IDE：Pycharm</p><p>本项目为2022秋北航网络空间安全学院数据库实验课程作业。作业需要进行简单的全栈开发。时间紧迫，且本人初次接触Vue，过程中遇到了许多问题。在此记录项目的开发过程。</p><p>项目GitHub仓库：<a href="https://github.com/yunsaijc/2022-Autumn-DB_Lab3-Django-Vue-Project.git">https://github.com/yunsaijc/2022-Autumn-DB_Lab3-Django-Vue-Project.git</a></p><h2 id="后端-Django"><a href="#后端-Django" class="headerlink" title="后端-Django"></a>后端-Django</h2><h3 id="初始化与配置"><a href="#初始化与配置" class="headerlink" title="初始化与配置"></a>初始化与配置</h3><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>通过命令<code>django-admin startproject project_name</code>来在当前路径下创建一个新的项目，项目文件夹结构如下：</p><img src="/2022/12/09/3-Django+Vue/image-20221118234718172.png" class=""><p>随后通过命令<code>python manage.py startapp app_name</code>来创建一个app，并将该app的名字加入到项目文件夹的<code>settings.py</code>下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;api&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在该app文件夹下创建一个<code>urls.py</code>用于管理<code>url</code>，文件夹目录结构如下：</p><img src="/2022/12/09/3-Django+Vue/image-20221118234925903.png" class=""><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>在项目文件夹的<code>settings.py</code>下设置数据库信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;DB_Lab3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;init_command&#x27;</span>: <span class="string">&quot;SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在项目文件夹的<code>__init__.py</code>下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>然后运行命令<code>python manage.py makemigrations</code>生成迁移文件，再通过<code>python manage.py migrate</code>进行迁移，最后运行<code>python manage.py inspectdb &gt; users/models.py</code>，这时候app文件夹下的<code>models.py</code>就会根据数据库中的表自动生成类。</p><h4 id="跨站点请求设置"><a href="#跨站点请求设置" class="headerlink" title="跨站点请求设置"></a>跨站点请求设置</h4><p>需要进行跨站点请求的相关设置。<br>首先通过<code>pip</code>安装<code>django-cors-headers</code>包，然后在<code>settings.py</code>下进行设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>后端逻辑的实现在<code>app</code>文件夹的<code>views.py</code>文件中完成，在本项目中也就是<code>/api/views.py</code>。其中登录函数的代码如下所示，完整代码见Github仓库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;errno&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;用户名或密码为空&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = Users.objects.get(user_name=username)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;errno&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;用户不存在&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> password == user.pass_word:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;errno&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;登录成功&quot;</span>, <span class="string">&#x27;username&#x27;</span>: username&#125;)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;errno&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;密码不正确&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;errno&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;请求方法错误&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="前端-Vue"><a href="#前端-Vue" class="headerlink" title="前端-Vue"></a>前端-Vue</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>创建项目：<code>vue create project_name</code>，选择<code>vuex</code>（前端状态存储管理）和<code>router</code>（路由管理）</p><p>项目结构如下。其中<code>src</code>文件夹存放源代码，<code>dist</code>文件夹存放<code>npm run build</code>，命令编译后生成的文件：</p><img src="/2022/12/09/3-Django+Vue/image-20221209175859510.png" class=""><p><code>src</code>文件夹结构如下：</p><img src="/2022/12/09/3-Django+Vue/image-20221209180008500.png" class=""><p>各个目录或文件的说明如下：</p><div class="table-container"><table><thead><tr><th>目录/文件</th><th>说明</th></tr></thead><tbody><tr><td>node_modules</td><td>npm 加载的项目依赖模块</td></tr><tr><td>public</td><td>静态资源，build 构建后为根目录，含网站导航栏图标、首页入口文件</td></tr><tr><td>src</td><td>开发做的事情基本都在这个目录下，含：  • assets: 放置一些图片、字体等资源  • components: 放置组件文件，一般为全局组件  • router: 网站路由跳转设置  • store: 前端数据存储  • views: 放置各页面文件  • App.vue: 项目入口文件  • main.js: 项目的核心文件，在这里可以导入各种全局依赖</td></tr><tr><td>.xxx文件</td><td>配置文件，包括语法配置、git配置(.gitignore)等</td></tr><tr><td>package.json</td><td>项目配置文件</td></tr><tr><td>README.md</td><td>项目的说明文档</td></tr></tbody></table></div><h3 id="文件结构理解"><a href="#文件结构理解" class="headerlink" title="文件结构理解"></a>文件结构理解</h3><ol><li><p>入口的<code>main.js</code>文件引入<code>vue</code>框架和<code>App.vue</code>主组件，然后实例化<code>vue</code>对象，在<code>components</code>属性中定义组件名</p></li><li><p><code>App.vue</code>主组件，里面集合了<code>html, js, css</code>语法，分别对应<code>vue</code>文件的<code>&lt;template&gt;, &lt;script&gt;, &lt;style&gt;</code>部分。</p><p>在此主组件文件中，也可以引用其他子组件，引用时在<code>script</code>标签所在的<code>js</code>中用<code>import</code>引入，然后在实例化<code>vue</code>对象中的<code>components</code>中定义名字，然后在<code>template</code>所在的<code>html</code>中运用</p></li><li><p>子组件在<code>components</code>文件中，一般此文件夹中放置的都是子组件，被<code>App.vue</code>主组件引用</p></li></ol><h3 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h3><p>前端的实现在<code>appfront</code>文件夹的<code>views</code>文件夹中完成，在本项目中也就是<code>/appfront/views</code>。其中登录页面的代码如下所示，完整代码见Github仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;login&quot; class=&quot;login&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">      &lt;h1&gt;登 录&lt;/h1&gt;</span><br><span class="line">      &lt;h2 v-if=&quot;userInfo!=null&quot;&gt;您已经以 &#123;&#123;userInfo.user.username&#125;&#125; 的身份登录&lt;/h2&gt;</span><br><span class="line">      &lt;el-form ref=&quot;form&quot; class=&quot;form&quot;&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">          &lt;el-input placeholder=&quot;用户名&quot; type=&quot;username&quot; v-model=&quot;username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item id=&quot;password&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">          &lt;el-input placeholder=&quot;密码&quot; show-password type=&quot;password&quot; v-model=&quot;password&quot; autocomplete=&quot;off&quot; @keyup.enter.native=&quot;login&quot; &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;div &gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;click_login&quot;&gt;登&amp;nbsp;&amp;nbsp;录&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;click_register&quot;&gt;注&amp;nbsp;&amp;nbsp;册&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button v-if=&quot;userInfo!=null&quot; type=&quot;danger&quot; @click=&quot;click_logout&quot;&gt;登&amp;nbsp;&amp;nbsp;出&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import qs from &quot;qs&quot;;</span><br><span class="line">import user from &quot;@/store/user&quot;</span><br><span class="line">const userInfo = user.getters.getUser(user.state());</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;login&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userInfo,</span><br><span class="line">      username: &#x27;&#x27;,</span><br><span class="line">      password: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function() &#123;</span><br><span class="line">    this.username = userInfo.user.username</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    click_login() &#123;</span><br><span class="line">      this.$axios(&#123;</span><br><span class="line">        method: &#x27;post&#x27;,</span><br><span class="line">        url: &#x27;/api/login/&#x27;, </span><br><span class="line">        data: qs.stringify(&#123;</span><br><span class="line">          username: this.username,</span><br><span class="line">          password: this.password</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(res =&gt; &#123;</span><br><span class="line">        switch (res.data.errno) &#123;</span><br><span class="line">          case 0:</span><br><span class="line">            window.alert(&quot;登录成功！&quot;);</span><br><span class="line">            /* 将后端返回的 user 信息使用 vuex 存储起来 */</span><br><span class="line">            this.$store.dispatch(&#x27;saveUserInfo&#x27;, &#123;</span><br><span class="line">              user: &#123;</span><br><span class="line">                &#x27;username&#x27;: res.data.username</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            location.reload();</span><br><span class="line">            break;</span><br><span class="line">          default:</span><br><span class="line">            window.alert(&quot;登录失败！&quot; + res.data.msg);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(err =&gt; &#123;</span><br><span class="line">        console.log(err);         /* 若出现异常则在终端输出相关信息 */</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    click_register() &#123;</span><br><span class="line">      this.$axios(&#123;</span><br><span class="line">        method: &#x27;post&#x27;,</span><br><span class="line">        url: &#x27;/api/register/&#x27;,</span><br><span class="line">        data: qs.stringify(&#123;</span><br><span class="line">          username: this.username,</span><br><span class="line">          password: this.password</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(res =&gt; &#123;</span><br><span class="line">        switch (res.data.errno) &#123;</span><br><span class="line">          case 0:</span><br><span class="line">            window.alert(&quot;注册成功！&quot;);</span><br><span class="line">            break;</span><br><span class="line">          default:</span><br><span class="line">            window.alert(&quot;注册失败！&quot; + res.data.msg);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(err =&gt; &#123;</span><br><span class="line">        console.log(err);         /* 若出现异常则在终端输出相关信息 */</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    click_logout() &#123;</span><br><span class="line">      this.$store.dispatch(&#x27;clear&#x27;);</span><br><span class="line">      window.alert(&#x27;登出成功！&#x27;);</span><br><span class="line">      location.reload();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#login &#123;</span><br><span class="line">  font-family: &#x27;Noto Serif SC&#x27;, serif;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">#login &gt;&gt;&gt; .el-input__inner &#123;</span><br><span class="line">  font-family: &#x27;Noto Serif SC&#x27;, serif;</span><br><span class="line">&#125;</span><br><span class="line">#login .bgbox &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  z-index: -3;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  object-fit: cover;</span><br><span class="line">  transition: opacity 1s,transform .25s,filter .25s;</span><br><span class="line">  backface-visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">#login .logo &#123;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  height: 150px;</span><br><span class="line">&#125;</span><br><span class="line">#login .wrap &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 315px;</span><br><span class="line">  padding: 0 25px 0 25px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  background-color: rgba(255, 255, 255, 0.85);</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">&#125;</span><br><span class="line">#login .btn_login &#123;</span><br><span class="line">  margin-top: 25px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">#login .btn_login button&#123;</span><br><span class="line">  line-height: 10px;</span><br><span class="line">  font-family: &#x27;Noto Serif SC&#x27;, serif;</span><br><span class="line">  width: 70%;</span><br><span class="line">  height: 38px;</span><br><span class="line">&#125;</span><br><span class="line">#login .suffix &#123;</span><br><span class="line">  font-size:14px;</span><br><span class="line">  line-height:10px;</span><br><span class="line">  color:#999;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  float:right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="将Vue与Django绑定"><a href="#将Vue与Django绑定" class="headerlink" title="将Vue与Django绑定"></a>将Vue与Django绑定</h2><p>在前端文件夹下运行命令<code>npm run build</code>进行编译</p><p>目前我们已经分别完成了Django后端和Vue前端工程的创建和编写，但实际上它们是运行在各自的服务器上。因此我们须要把Django的·TemplateView·指向我们刚才生成的前端dist文件。</p><p>在<code>/DB_Lab3/urls.py</code>下进行如下设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api/&#x27;</span>, include(<span class="string">&#x27;api.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>, TemplateView.as_view(template_name=<span class="string">&quot;index.html&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在<code>/DB_Lab3/settings.py</code>下进行如下设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        ...,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [<span class="string">&#x27;appfront/dist&#x27;</span>],</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    <span class="comment"># BASE_DIR / &quot;static&quot;,</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;appfront/dist/static&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>随后在项目根目录执行<code>python manage.py runserver</code>即可。</p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>在使用<code>element-ui</code>时，遇到<code>el-table</code>表格不显示的问题，卡了两个小时才找到原因…</p><p>原因：版本问题！！！</p><p>解决办法：重新装一个低版本的包！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall element-ui</span><br><span class="line">npm install element-ui@<span class="number">2.9</span><span class="number">.2</span> -S</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://super-buaa-2021.github.io/Vuebook/">https://super-buaa-2021.github.io/Vuebook/</a></p><p><a href="https://cloud.tencent.com/developer/article/1005607">https://cloud.tencent.com/developer/article/1005607</a></p><p><a href="http://t.zoukankan.com/smile-fanyin-p-11258300.html">http://t.zoukankan.com/smile-fanyin-p-11258300.html</a></p><p><a href="https://blog.csdn.net/weixin_48282959/article/details/124126667">https://blog.csdn.net/weixin_48282959/article/details/124126667</a></p><p><a href="https://blog.csdn.net/m0_59023970/article/details/123427008">https://blog.csdn.net/m0_59023970/article/details/123427008</a></p><p><a href="https://blog.csdn.net/yehaocheng520/article/details/117025938">https://blog.csdn.net/yehaocheng520/article/details/117025938</a></p><p><a href="https://blog.csdn.net/qq_41216743/article/details/104605524">https://blog.csdn.net/qq_41216743/article/details/104605524</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</category>
      
      
      <category domain="http://yunsaijc.top/tags/Python/">Python</category>
      
      <category domain="http://yunsaijc.top/tags/Django/">Django</category>
      
      <category domain="http://yunsaijc.top/tags/Vue/">Vue</category>
      
      <category domain="http://yunsaijc.top/tags/Web/">Web</category>
      
      <category domain="http://yunsaijc.top/tags/MySQL/">MySQL</category>
      
      
      <comments>http://yunsaijc.top/2022/12/09/3-Django+Vue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于联邦学习构造Non-IID数据集的记录</title>
      <link>http://yunsaijc.top/2022/11/16/2-%E5%85%B3%E4%BA%8E%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E6%9E%84%E9%80%A0N-iid%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E8%AE%B0%E5%BD%95/</link>
      <guid>http://yunsaijc.top/2022/11/16/2-%E5%85%B3%E4%BA%8E%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E6%9E%84%E9%80%A0N-iid%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E8%AE%B0%E5%BD%95/</guid>
      <pubDate>Wed, 16 Nov 2022 12:21:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;简单来说，Non-IID就是指每个设备中的数据分布不能代表全局数据分布。本篇简单记录一下自己在研究联邦学习过程中对Non-IID数据的思考和处理&lt;/p&gt;
&lt;h2 id=&quot;Dateset-Shift（数据集偏移）&quot;&gt;&lt;a href=&quot;#Dateset-Shift（数据集偏移）</description>
        
      
      
      
      <content:encoded><![CDATA[<p>简单来说，Non-IID就是指每个设备中的数据分布不能代表全局数据分布。本篇简单记录一下自己在研究联邦学习过程中对Non-IID数据的思考和处理</p><h2 id="Dateset-Shift（数据集偏移）"><a href="#Dateset-Shift（数据集偏移）" class="headerlink" title="Dateset Shift（数据集偏移）"></a>Dateset Shift（数据集偏移）</h2><p>联邦学习中客户端之间数据的Non-IID分布，和在做机器学习任务时可能遇到的训练集与测试集分布不一致是一个道理</p><p>训练集和测试集分布不一致被称作数据集偏移(Dataset Shift)，有3种类型：</p><ol><li><p><strong>协变量偏移(Covariate Shift)</strong>: 独立变量的偏移，指训练集和测试集的输入服从不同分布，但背后是服从同一个函数关系，即:</p><script type="math/tex; mode=display">P_{train}(y|x) = P_{test}(y|x)\\P_{train}(x) \neq P_{test}(x)</script></li><li><p><strong>先验概率偏移(Prior Probability Shift)</strong>: 目标变量的偏移，即：</p><script type="math/tex; mode=display">P_{train}(x|y) = P_{test}(x|y)\\P_{train}(y) \neq P_{test}(y)</script></li><li><p><strong>概念偏移(Concept Shift)</strong>: 独立变量和目标变量之间关系的偏移，即：</p><script type="math/tex; mode=display">P_{train}(y|x) \neq P_{test}(y|x)\ and\ P_{train}(x) = P_{test}(x)\ in\ X\rightarrow Y\ problems \\P_{train}(x|y) \neq P_{test}(x|y)\ and\ P_{train}(y) = P_{test}(y)\ in\ Y\rightarrow X\ problems</script></li></ol><h2 id="联邦学习中客户端数据Non-IID分布的五种类型"><a href="#联邦学习中客户端数据Non-IID分布的五种类型" class="headerlink" title="联邦学习中客户端数据Non-IID分布的五种类型"></a>联邦学习中客户端数据Non-IID分布的五种类型</h2><ol><li><p>Feature distribution skew (convariate shift)</p><p>与数据集偏移中的协变量偏移同理</p><p>以MNIST数据集为例，不同的人写同一个数字，写法不同（即不同客户端的$P_i(x)$分布不同），但是不同客户端用这个特征<code>x</code>预测得到该标签<code>y</code>的概率是相近的，即$P(y|x)$分布相同</p></li><li><p>Label distribution skew (prior probability shift)</p><p>与数据集偏移中的先验概率偏移同理</p><p>以MNIST数据集为例，不同的客户端内，各个标签所占的比例不是平均的，如A有50%的标签<code>1</code>，B有50%的标签<code>2</code>（即不同客户端的$P_i(y)$分布不同），但是当标签给定时，A和B中对应的特征都大概率相似，即$P(x|y)$分布相同</p></li><li><p>Same label, different features (concept shift)</p><p>与数据集偏移中的概念偏移同理，$P<em>{train}(x|y) \neq P</em>{test}(x|y)\ and\ P<em>{train}(y) = P</em>{test}(y)\ $</p><p>通俗理解：同样是车（标签<code>y</code>），迈凯伦和花冠完全是两回事（特征<code>x</code>）</p></li><li><p>Same features, different label (concept shift)</p><p>与数据集偏移中的概念偏移同理，</p><p>$P<em>{train}(y|x) \neq P</em>{test}(y|x)\ and\ P<em>{train}(x) = P</em>{test}(x)$</p><p>通俗理解：同样是要买交通工具（特征<code>x</code>），A想买跑车，B想买机车（标签<code>y</code>）</p></li><li><p>Quantity skew or unbalancedness</p><p>即不同客户端持有的数据量差异较大</p></li></ol><h2 id="实践中遇到的具体实现方式"><a href="#实践中遇到的具体实现方式" class="headerlink" title="实践中遇到的具体实现方式"></a>实践中遇到的具体实现方式</h2><h3 id="A-第二类Non-IID的第一种分配方式"><a href="#A-第二类Non-IID的第一种分配方式" class="headerlink" title="A. 第二类Non-IID的第一种分配方式"></a>A. 第二类Non-IID的第一种分配方式</h3><p>​    以MNIST为例，共10个客户端。分配后的数据表示方式：建立一个字典，对于每个客户<code>i</code>，<code>i</code>作为键，数据的索引存在一个列表中作为值。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">0: [111, 333, 555]</span><br><span class="line">1: [222, 444, 666]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    数据分配思路：根据客户ID的奇偶性分为两类（当然也可以分为更多类，此处以两类为例）。同时将数据集根据标签分类，奇数、偶数各为一类。奇数数据在0~4客户端中平均分配，偶数数据在5~9客户端中平均分配。</p><p>​    当然，本例只是分为了2组，实际上也可以分为5组、10组。 </p><p>​    代码及注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mnist_noniid</span>(<span class="params">dataset, num_users</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Sample non-I.I.D client data from MNIST dataset</span></span><br><span class="line"><span class="string">    :param dataset: Dataset</span></span><br><span class="line"><span class="string">    :param num_users: Number of clients</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dict_users = &#123;i: np.array([], dtype=<span class="string">&#x27;int64&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_users)&#125;<span class="comment"># 初始化字典</span></span><br><span class="line">    idxs = np.arange(<span class="built_in">len</span>(dataset))<span class="comment"># 所有数据的索引</span></span><br><span class="line">    labels = dataset.train_labels.numpy()<span class="comment"># 所有数据的标签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sort labels</span></span><br><span class="line">    idxs_labels = np.vstack((idxs, labels))<span class="comment"># 将索引和标签对应起来</span></span><br><span class="line">    idxs_labels = idxs_labels[:, idxs_labels[<span class="number">1</span>, :].argsort()]<span class="comment"># 根据第2维的数据进行排序</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(idxs_labels[<span class="number">0</span>])):</span><br><span class="line">        <span class="keyword">if</span> idxs_labels[<span class="number">1</span>, i] % <span class="number">2</span> != <span class="number">0</span>:<span class="comment"># 将标签为奇数的数据分到一组去</span></span><br><span class="line">            tmp.append(idxs_labels[<span class="number">0</span>, i])</span><br><span class="line">    idxs = idxs_labels[<span class="number">0</span>, :]<span class="comment"># 取出第1维的索引</span></span><br><span class="line">    group1 = <span class="built_in">set</span>(tmp)</span><br><span class="line">    group2 = <span class="built_in">set</span>(<span class="built_in">set</span>(idxs) - group1)<span class="comment"># 剩下的为标签为偶数的数据，分到另一组</span></span><br><span class="line">    group1 = <span class="built_in">list</span>(group1)</span><br><span class="line">    group2 = <span class="built_in">list</span>(group2)</span><br><span class="line">    shard1 = <span class="built_in">len</span>(group1) // (num_users // <span class="number">2</span>)<span class="comment"># 每一组中每个客户端应该持有多少个数据</span></span><br><span class="line">    shard2 = <span class="built_in">len</span>(group2) // (num_users // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># divide and assign</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_users):</span><br><span class="line">        <span class="keyword">if</span> i &lt; (num_users // <span class="number">2</span>):<span class="comment"># 0~4客户端，在奇数组中随机取出shard1个数据</span></span><br><span class="line">            rand_set = <span class="built_in">set</span>(np.random.choice(group1, shard1, replace=<span class="literal">False</span>))</span><br><span class="line">            group1 = <span class="built_in">list</span>(<span class="built_in">set</span>(group1) - rand_set)</span><br><span class="line">            dict_users[i] = rand_set</span><br><span class="line">        <span class="keyword">else</span>:<span class="comment"># 5~9客户端，在偶数组中随机取出shard2个数据</span></span><br><span class="line">            rand_set = <span class="built_in">set</span>(np.random.choice(group2, shard2, replace=<span class="literal">False</span>))</span><br><span class="line">            group2 = <span class="built_in">list</span>(<span class="built_in">set</span>(group2) - rand_set)</span><br><span class="line">            dict_users[i] = rand_set</span><br><span class="line">    <span class="keyword">if</span> dict_users == &#123;&#125;:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> dict_users</span><br></pre></td></tr></table></figure><h3 id="B-第二类Non-IID的第二种分配方式"><a href="#B-第二类Non-IID的第二种分配方式" class="headerlink" title="B. 第二类Non-IID的第二种分配方式"></a>B. 第二类Non-IID的第二种分配方式</h3><p>​    数据分配思路：将排序后的数据分为<code>2 * num_users</code>个碎片，每个客户随机取2个碎片，那么该客户拥有的数据就只包含这2个碎片里的标签（比如说60000个数据分成200个碎片，每个碎片300个数据，假设某个客户取到了前面的600个数据，那么他取到的数据含有的标签就只可能包含0，1，2，但是不可能包含9），从而构成了Non-IID</p><p>​    代码及注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mnist_noniid</span>(<span class="params">dataset, num_users</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Sample non-I.I.D client data from MNIST dataset</span></span><br><span class="line"><span class="string">    :param dataset: Dataset</span></span><br><span class="line"><span class="string">    :param num_users: Number of clients</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    num_shards, num_imgs = num_users * <span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">len</span>(dataset) / (num_users * <span class="number">2</span>))<span class="comment"># 计算碎片数、每个碎片包含的数据条数</span></span><br><span class="line">    idx_shard = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_shards)]<span class="comment"># 每个碎片的索引</span></span><br><span class="line">    dict_users = &#123;i: np.array([], dtype=<span class="string">&#x27;int64&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_users)&#125;<span class="comment"># 初始化字典</span></span><br><span class="line">    idxs = np.arange(<span class="built_in">len</span>(dataset))<span class="comment"># 所有数据的索引</span></span><br><span class="line">    labels = dataset.train_labels.numpy()<span class="comment"># 所有数据的标签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sort labels</span></span><br><span class="line">    idxs_labels = np.vstack((idxs, labels))<span class="comment"># 将索引和标签对应起来</span></span><br><span class="line">    idxs_labels = idxs_labels[:, idxs_labels[<span class="number">1</span>, :].argsort()]<span class="comment"># 根据第2维的数据进行排序</span></span><br><span class="line">    idxs = idxs_labels[<span class="number">0</span>, :]<span class="comment"># 取出第1维的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># divide and assign</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_users):</span><br><span class="line">        rand_set = <span class="built_in">set</span>(np.random.choice(idx_shard, <span class="number">2</span>, replace=<span class="literal">False</span>))<span class="comment"># 随机取2个碎片</span></span><br><span class="line">        idx_shard = <span class="built_in">list</span>(<span class="built_in">set</span>(idx_shard) - rand_set)</span><br><span class="line">        <span class="keyword">for</span> rand <span class="keyword">in</span> rand_set:</span><br><span class="line">        dict_users[i] = np.concatenate((dict_users[i], idxs[rand * num_imgs:(rand + <span class="number">1</span>) * num_imgs]), axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> dict_users == &#123;&#125;:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> dict_users</span><br></pre></td></tr></table></figure><h2 id="附：Python中-m-n-的用法"><a href="#附：Python中-m-n-的用法" class="headerlink" title="附：Python中[m, n]的用法"></a>附：Python中[m, n]的用法</h2><p><code>x[m, n]</code>是通过numpy引用数组或矩阵中的某一段数据集的一种写法。<code>m</code>表示第几维，<code>n</code>表示第几个数据。</p><p>在一个2维矩阵中，通俗来理解，<code>x[m, n]</code>就是第<code>m</code>行第<code>n</code>列的数据，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>那么<code>x[1, 2]</code>得到的数据就是<code>6</code></p><p>其他常用的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[n, :]<span class="comment"># 取第n维的全部数据</span></span><br><span class="line">x[:, n]<span class="comment"># 在全部维中取第n个数据</span></span><br><span class="line">x[:, m:n]<span class="comment"># 在全部维中取第m~(n-1)个数据</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/qq_43827595/article/details/120661931">https://blog.csdn.net/qq_43827595/article/details/120661931</a></p><p><a href="https://blog.csdn.net/u014159143/article/details/80307717">https://blog.csdn.net/u014159143/article/details/80307717</a></p><p><a href="https://zhuanlan.zhihu.com/p/263959892">https://zhuanlan.zhihu.com/p/263959892</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记</category>
      
      
      <category domain="http://yunsaijc.top/tags/Python/">Python</category>
      
      <category domain="http://yunsaijc.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="http://yunsaijc.top/tags/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/">联邦学习</category>
      
      <category domain="http://yunsaijc.top/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/">神经网络</category>
      
      
      <comments>http://yunsaijc.top/2022/11/16/2-%E5%85%B3%E4%BA%8E%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E6%9E%84%E9%80%A0N-iid%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E8%AE%B0%E5%BD%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>区块链实验记录</title>
      <link>http://yunsaijc.top/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</link>
      <guid>http://yunsaijc.top/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</guid>
      <pubDate>Fri, 14 Oct 2022 16:07:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;第1次实验&quot;&gt;&lt;a href=&quot;#第1次实验&quot; class=&quot;headerlink&quot; title=&quot;第1次实验&quot;&gt;&lt;/a&gt;第1次实验&lt;/h2&gt;&lt;h3 id=&quot;实验1：求3个数的最小公倍数&quot;&gt;&lt;a href=&quot;#实验1：求3个数的最小公倍数&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="第1次实验"><a href="#第1次实验" class="headerlink" title="第1次实验"></a>第1次实验</h2><h3 id="实验1：求3个数的最小公倍数"><a href="#实验1：求3个数的最小公倍数" class="headerlink" title="实验1：求3个数的最小公倍数"></a>实验1：求3个数的最小公倍数</h3><h4 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h4><p>对于两个数a和b，在实现时使用如下原理来求得他们的最小公倍数（记为lcm，其中gcd为两数的最大公因子）：</p><script type="math/tex; mode=display">lcm = \frac{a \cdot b}{gcd}</script><p>因此对于3个数a，b，c来说，只需先求出a和b的最小公倍数x，b和c的最小公倍数y，再求出x和y的最小公倍数即为3个数的最小公倍数；</p><p>或者，直接求出3个数的最大公因子gcd，通过公式(1)的方法也可以求得同样的结果：$lcm=\frac{a\cdot b \cdot c}{gcd}$。</p><p>本题采用的是第一种方法。</p><h4 id="实验结果截图"><a href="#实验结果截图" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/1.png" class=""><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="type">int</span></span><br><span class="line">fmt.Scanf(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c)</span><br><span class="line"><span class="keyword">if</span> a*b*c == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Wrong number !&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d1 := gcd(a, b)</span><br><span class="line">d2 := gcd(b, c)</span><br><span class="line">x1 := <span class="type">int</span>(a * b / d1)</span><br><span class="line">x2 := <span class="type">int</span>(b * c / d2)</span><br><span class="line"></span><br><span class="line">d3 := gcd(x1, x2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, <span class="type">int</span>(x1*x2/d3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> a%b == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实验2：比特币测试网地址的生成"><a href="#实验2：比特币测试网地址的生成" class="headerlink" title="实验2：比特币测试网地址的生成"></a>实验2：比特币测试网地址的生成</h3><h4 id="实验流程-1"><a href="#实验流程-1" class="headerlink" title="实验流程"></a>实验流程</h4><p>本题流程较为简单，只需按照流程图所示进行哈希运算即可，但需要注意数据的格式转换问题。</p><p>在一开始处理十六进制字符串时，先将字符串通过<code>hex.DecodeString</code>方法转换为字节数组<code>[]byte</code>。</p><p>在中间的运算过程中，为方便起见，始终采用字节数组的方式。</p><p>最后直接通过<code>base58.Encode</code>方法对得到的字节数组进行编码即可得到最终结果。</p><h4 id="实验结果截图-1"><a href="#实验结果截图-1" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/2.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/3.png" class=""><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成比特币测试网地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;base58&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/ripemd160&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">prevb := <span class="string">&quot;6f&quot;</span></span><br><span class="line">prekey := <span class="string">&quot;02b1ebcdbac723f7444fdfb8e83b13bd14fe679c59673a519df6a1038c07b719c6&quot;</span></span><br><span class="line"><span class="comment">// prekey := &quot;036e69a3e7c303935403d5b96c47b7c4fa8a80ca569735284a91d930f0f49afa86&quot;</span></span><br><span class="line">vb, _ := hex.DecodeString(prevb)</span><br><span class="line">key, _ := hex.DecodeString(prekey)</span><br><span class="line"></span><br><span class="line">tmp1 := sha256.Sum256(key)</span><br><span class="line"></span><br><span class="line">rip := ripemd160.New()</span><br><span class="line">rip.Write(tmp1[:])</span><br><span class="line">fp := rip.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">append</span>(vb, fp...)</span><br><span class="line"></span><br><span class="line">tmp2 := sha256.Sum256(fp)</span><br><span class="line"></span><br><span class="line">ck := sha256.Sum256(tmp2[:])</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">append</span>(fp, ck[:<span class="number">4</span>]...)</span><br><span class="line"></span><br><span class="line">myAb := base58.NewAlphabet(<span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>)</span><br><span class="line">result := base58.Encode(fp, myAb)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实验3：Merkle-Tree"><a href="#实验3：Merkle-Tree" class="headerlink" title="实验3：Merkle Tree"></a>实验3：Merkle Tree</h3><h4 id="实验流程-2"><a href="#实验流程-2" class="headerlink" title="实验流程"></a>实验流程</h4><p>首先需要自定义一个结构体，代表树中的节点。新建16个叶节点，并为他们分别赋予一个字符串。</p><p>随后需要构建二叉树。本题采用类似Huffman码树的建树方法：先将16个叶节点放入一个队列中，每次取出最后两个节点构成一个新节点插入队列头部，直至队列只剩下一个元素为止，该元素即整棵树的根节点。</p><p>对于每个节点的Hash值。在未对节点作出改变时（即刚构建二叉树时），可以在建树的同时计算Hash值并存储到节点当中；在对节点作出改变之后，可以采用后序遍历的方法对每个节点的Hash值进行重新计算，如代码中的<code>calHash</code>函数所示。</p><p>最后需要找出作出改变的节点。如果一个节点作出了改变，那么该节点的所有长辈节点（即父节点，祖父节点，曾祖父节点等等…）一直到根节点的Hash值都会发生改变。因此只需要从根节点进行前序遍历，一直沿着Hash值发生了改变的节点寻找下去，知道找到一个叶节点，那么该叶节点即为发生改变的节点。</p><h4 id="实验结果截图-2"><a href="#实验结果截图-2" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><p>前序遍历的部分输出如下：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/4.png" class=""><p>找出改变的节点输出如下，该ID代表的节点可以参考Huffman编码的构造方法：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/5.png" class=""><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Merkle Tree</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">leaf             <span class="type">bool</span><span class="comment">// 标识该节点是否为叶节点</span></span><br><span class="line">ID, str          <span class="type">string</span><span class="comment">// ID用于标识用户，str为内容</span></span><br><span class="line">oldHash, hashVal [<span class="number">32</span>]<span class="type">byte</span><span class="comment">// oldHash用于重新计算之后的hashVal进行对比以判断是否改变</span></span><br><span class="line">left, right      *node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n node)</span></span> printMsg() &#123;</span><br><span class="line">fmt.Print(n.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n node)</span></span> printHash() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%x&quot;</span>, n.hashVal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新计算整棵树的Hash值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *node)</span></span> calHash() &#123;</span><br><span class="line"><span class="keyword">if</span> r == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">r.left.calHash()</span><br><span class="line">r.right.calHash()</span><br><span class="line">r.oldHash = r.hashVal</span><br><span class="line"><span class="keyword">if</span> r.leaf &#123;</span><br><span class="line">tmp, _ := hex.DecodeString(r.str)</span><br><span class="line">r.hashVal = sha256.Sum256(tmp)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r.hashVal = addHash(r.left.hashVal, r.right.hashVal)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> queue []*node</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">16</span>; i++ &#123;</span><br><span class="line">newNode := &amp;node&#123;leaf: <span class="literal">true</span>, str: strconv.Itoa(<span class="number">77</span>*i + <span class="number">78</span>)&#125;</span><br><span class="line">tmp, _ := hex.DecodeString(newNode.str)</span><br><span class="line">newNode.hashVal = sha256.Sum256(tmp)</span><br><span class="line">queue = <span class="built_in">append</span>(queue, newNode)</span><br><span class="line">&#125;</span><br><span class="line">root := buildTree(queue)</span><br><span class="line">preOrderID(root, <span class="string">&quot;&quot;</span>)</span><br><span class="line">preOrder(root)</span><br><span class="line">fmt.Print()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改其中一个叶节点</span></span><br><span class="line"><span class="comment">// tmpNode := root</span></span><br><span class="line"><span class="comment">// for tmpNode.right != nil &#123;</span></span><br><span class="line"><span class="comment">// tmpNode = tmpNode.right</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">tmpNode := root.left.left.left.right</span><br><span class="line"><span class="comment">// root.right.hashVal = sha256.Sum256([]byte&#123;12&#125;)</span></span><br><span class="line">tmpNode.str = <span class="string">&quot;blrblrblr&quot;</span></span><br><span class="line"></span><br><span class="line">root.calHash()</span><br><span class="line">preOrder(root)</span><br><span class="line"></span><br><span class="line">compareMerkleTree(root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(queue []*node)</span></span> *node &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">1</span> &#123;</span><br><span class="line">l := <span class="built_in">len</span>(queue)</span><br><span class="line">left, right := queue[l<span class="number">-2</span>], queue[l<span class="number">-1</span>]</span><br><span class="line">queue = queue[:l<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">tmp := &amp;node&#123;leaf: <span class="literal">false</span>, left: left, right: right&#125;</span><br><span class="line">tmp.hashVal = addHash(left.hashVal, right.hashVal)</span><br><span class="line">queue = <span class="built_in">append</span>([]*node&#123;tmp&#125;, queue...)</span><br><span class="line">&#125;</span><br><span class="line">root := queue[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个Hash值相加并返回该值的Hash结果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addHash</span><span class="params">(a, b [32]<span class="type">byte</span>)</span></span> [<span class="number">32</span>]<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">var</span> tmp [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">32</span>; i++ &#123;</span><br><span class="line">tmp[i] = a[i] + b[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var tmpStr stirng = &quot;&quot;</span></span><br><span class="line"><span class="comment">// for i := 0; i &lt; 32; i++ &#123;</span></span><br><span class="line"><span class="comment">// tmpStr += strconv.FormatInt(tmp[i], 16)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// tmpStr := fmt.Sprintf(&quot;%x&quot;, binary.BigEndian.Uint32(tmp[:]))</span></span><br><span class="line"><span class="comment">// result := sha256.Sum256([]byte(tmpStr))</span></span><br><span class="line">result := sha256.Sum256(tmp[:])</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历，赋予每个节点相应的ID。根节点ID为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrderID</span><span class="params">(root *node, s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root.ID = s</span><br><span class="line">preOrderID(root.left, s+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">preOrderID(root.right, s+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(root *node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;ID: &quot;</span> + root.ID + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> root.leaf &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Leaf: \t&quot;</span>)</span><br><span class="line">root.printMsg()</span><br><span class="line">fmt.Print(<span class="string">&quot;\n\t\t&quot;</span>)</span><br><span class="line">root.printHash()</span><br><span class="line">fmt.Print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Not leaf: \t&quot;</span>)</span><br><span class="line">root.printHash()</span><br><span class="line">fmt.Print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">preOrder(root.left)</span><br><span class="line">preOrder(root.right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较改变节点前后的Hash值，找出改变的节点的ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compareMerkleTree</span><span class="params">(root *node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(root.oldHash == root.hashVal)</span></span><br><span class="line"><span class="keyword">if</span> !root.leaf &#123;</span><br><span class="line"><span class="keyword">if</span> root.left.oldHash != root.left.hashVal &#123;</span><br><span class="line">compareMerkleTree(root.left)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">compareMerkleTree(root.right)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Adversary&#x27;s ID is: &quot;</span> + root.ID)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第2次实验"><a href="#第2次实验" class="headerlink" title="第2次实验"></a>第2次实验</h2><h3 id="实验1：构建区块"><a href="#实验1：构建区块" class="headerlink" title="实验1：构建区块"></a>实验1：构建区块</h3><h4 id="实验流程-3"><a href="#实验流程-3" class="headerlink" title="实验流程"></a>实验流程</h4><p>对于<code>Block</code>类，按照指导书中给出的表格设置类的属性即可；</p><p>对于Hash值的计算，通过公式$Hash = SHA256(PrevHash + Time+ Data)$生成Hash值，并将生成的Hash值写入Block中。</p><h4 id="实验结果截图-3"><a href="#实验结果截图-3" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/6.png" class=""><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>以下为<code>block.go</code>文件的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Block struct &#123;</span><br><span class="line">Time                 int64</span><br><span class="line">Data, PrevHash, Hash []byte</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewBlock(data string, prevHash []byte) *Block &#123;</span><br><span class="line">block := &amp;Block&#123;time.Now().Unix(), []byte(data), prevHash, []byte&#123;&#125;&#125;</span><br><span class="line">block.SetHash()</span><br><span class="line"><span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (b *Block) SetHash() &#123;</span><br><span class="line">//为Block生成<span class="built_in">hash</span>，使用sha256.Sum256(data []byte)函数</span><br><span class="line">var tmp <span class="built_in">bytes</span>.Buffer</span><br><span class="line">tmp.Write(b.PrevHash)</span><br><span class="line">tmp.Write([]byte&#123;byte(b.Time)&#125;)</span><br><span class="line">tmp.Write(b.Data)</span><br><span class="line"><span class="built_in">hash</span> := (sha256.Sum256(tmp.Bytes()))</span><br><span class="line">b.Hash = <span class="built_in">hash</span>[:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验2：实现一条链"><a href="#实验2：实现一条链" class="headerlink" title="实验2：实现一条链"></a>实验2：实现一条链</h3><h4 id="实验流程-4"><a href="#实验流程-4" class="headerlink" title="实验流程"></a>实验流程</h4><p>区块链类型<code>Blockchain</code>中存放的是一个<code>Block</code>类的指针数组。</p><p>在添加新的区块时，将<code>prevHash</code>设置为链中最后一个区块的Hash值，进而计算新的区块的Hash值，并写入该区块中，最后将该区块添加到链末尾；</p><p>在建立创世区块时的过程与添加新区块类似，只需将<code>prevHash</code>值设置为空，<code>data</code>值设置为<code>&#39;Genesis Block&#39;</code>，其余的过程与添加新区块相同。</p><h4 id="实验结果截图-4"><a href="#实验结果截图-4" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/7.png" class=""><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><p>以下为<code>blockchain.go</code>文件的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Blockchain struct &#123;</span><br><span class="line">blocks []*Block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (bc *Blockchain) AddBlock(data string) &#123;</span><br><span class="line">//可能用到的函数：</span><br><span class="line">//<span class="built_in">len</span>(array)：获取数组长度</span><br><span class="line">//append(array,b):将元素b添加至数组array末尾</span><br><span class="line">prevHash := bc.blocks[<span class="built_in">len</span>(bc.blocks)-<span class="number">1</span>].Hash</span><br><span class="line">block := &amp;Block&#123;time.Now().Unix(), []byte(data), prevHash, []byte&#123;&#125;&#125;</span><br><span class="line">block.SetHash()</span><br><span class="line">bc.blocks = append(bc.blocks, block)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewGenesisBlock() *Block &#123;</span><br><span class="line">//创世区块前置哈希为空，Data为<span class="string">&quot;Genesis Block&quot;</span></span><br><span class="line">prevHash := []byte&#123;&#125;</span><br><span class="line">data := []byte(<span class="string">&quot;Genesis Block&quot;</span>)</span><br><span class="line">block := &amp;Block&#123;time.Now().Unix(), []byte(data), prevHash, []byte&#123;&#125;&#125;</span><br><span class="line">block.SetHash()</span><br><span class="line"><span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewBlockchain() *Blockchain &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Blockchain&#123;[]*Block&#123;NewGenesisBlock()&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验3：添加工作量证明模块"><a href="#实验3：添加工作量证明模块" class="headerlink" title="实验3：添加工作量证明模块"></a>实验3：添加工作量证明模块</h3><h4 id="实验流程-5"><a href="#实验流程-5" class="headerlink" title="实验流程"></a>实验流程</h4><p>(本代码对已给的代码有部分修改：在<code>NewProofOfWork</code>函数中新建<code>ProofOfWork</code>类时，将target的值设置为<code>targetBits</code>个1和<code>(256-targetBits)</code>个0，而不是原来的1个1和<code>(256-targetBits)</code>个0)</p><p>对于<code>ProofOfWork.Run</code>函数，在将<code>nonce</code>的初始值设置为0之后，开始对其进行遍历：每更新一次<code>nonce</code>的值，就重新计算一次Hash值，并使用<code>ProofOfWork.Validate</code>函数进行验证，如果不符合要求就将<code>nonce</code>的值加1，并重复上述过程，直到符合条件为止。</p><p>对于<code>ProofOfWork.Validate</code>函数，先将计算得到的Hash值转为<code>big.Int</code>类型再传入<code>ProofOfWork.Validate</code>函数，然后将其与<code>target</code>进行按位与(<code>&amp;</code>)的操作，满足条件的值与<code>target</code>按位与将会得到0。因此只需将运算后的值与0对比即可。</p><p>对于<code>Block</code>类的<code>SetHash</code>函数，修改为通过<code>ProofOfWork</code>类来获取符合条件的Hash值。</p><p><strong>问题：工作量证明中的difficulty值的大小会怎样影响PoW计算时间？</strong></p><p>答：difficulty的值越大，要求连续为0的位数就越多，从Hash函数的性质来说，通过验证的概率就越小，因此PoW的计算时间就会越长。</p><h4 id="实验结果截图-5"><a href="#实验结果截图-5" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/8.png" class=""><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><p>以下为<code>proofofWork.go</code>文件的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const targetBits = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> ProofOfWork struct &#123;</span><br><span class="line">block  *Block</span><br><span class="line">target *big.Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewProofOfWork(b *Block) *ProofOfWork &#123;</span><br><span class="line">// target := big.NewInt(<span class="number">1</span>)</span><br><span class="line">// target.Lsh(target, uint(<span class="number">256</span>-targetBits))</span><br><span class="line">var x string = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">x += <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">x2, _ := strconv.ParseInt(x, <span class="number">2</span>, <span class="number">64</span>)</span><br><span class="line">target := big.NewInt(x2)</span><br><span class="line">target.Lsh(target, uint(<span class="number">256</span>-<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">pow</span> := &amp;ProofOfWork&#123;b, target&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pow</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="built_in">pow</span> *ProofOfWork) prepareData(nonce <span class="built_in">int</span>) []byte &#123;</span><br><span class="line">data := <span class="built_in">bytes</span>.Join(</span><br><span class="line">[][]byte&#123;</span><br><span class="line"><span class="built_in">pow</span>.block.PrevHash,</span><br><span class="line"><span class="built_in">pow</span>.block.Data,</span><br><span class="line">IntToHex(<span class="built_in">pow</span>.block.Time),</span><br><span class="line">IntToHex(int64(targetBits)),</span><br><span class="line">IntToHex(int64(nonce)),</span><br><span class="line">&#125;,</span><br><span class="line">[]byte&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="built_in">pow</span> *ProofOfWork) Run() (<span class="built_in">int</span>, []byte) &#123;</span><br><span class="line">var hashInt big.Int //<span class="built_in">hash</span>的整形表示</span><br><span class="line">var <span class="built_in">hash</span> [<span class="number">32</span>]byte</span><br><span class="line">nonce := <span class="number">0</span> //计数器</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Mining the block containing \&quot;%s\&quot;\n&quot;</span>, <span class="built_in">pow</span>.block.Data)</span><br><span class="line">/*</span><br><span class="line">实现Hashcash算法：对nonce从<span class="number">0</span>开始进行遍历，计算每一次哈希是否满足条件</span><br><span class="line">可能会用到的包及函数：big.Int.Cmp(),big.Int.SetBytes()</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">tmp := <span class="built_in">pow</span>.prepareData(nonce)</span><br><span class="line"><span class="built_in">hash</span> = sha256.Sum256(tmp)</span><br><span class="line">hashInt.SetBytes(<span class="built_in">hash</span>[:])</span><br><span class="line"><span class="keyword">for</span> !<span class="built_in">pow</span>.Validate(hashInt) &#123;</span><br><span class="line">nonce += <span class="number">1</span></span><br><span class="line">tmp = <span class="built_in">pow</span>.prepareData(nonce)</span><br><span class="line"><span class="built_in">hash</span> = sha256.Sum256(tmp)</span><br><span class="line">hashInt.SetBytes(<span class="built_in">hash</span>[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;\r%x&quot;</span>, <span class="built_in">hash</span>)</span><br><span class="line">fmt.Print(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nonce, <span class="built_in">hash</span>[:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="built_in">pow</span> *ProofOfWork) Validate(hashInt big.Int) <span class="built_in">bool</span> &#123;</span><br><span class="line">// var hashInt big.Int</span><br><span class="line">var isValid <span class="built_in">bool</span></span><br><span class="line">var tmp big.Int</span><br><span class="line">hashInt.And(&amp;hashInt, <span class="built_in">pow</span>.target)</span><br><span class="line">// fmt.Println(hashInt)</span><br><span class="line">// fmt.Println(tmp.SetInt64(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">if</span> hashInt.Cmp(tmp.SetInt64(<span class="number">0</span>)) == <span class="number">0</span> &#123;</span><br><span class="line">isValid = true</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">isValid = false</span><br><span class="line">&#125;</span><br><span class="line">//对给定哈希进行验证是否满足条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> isValid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为<code>block.go</code>文件修改后的<code>SetHash</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func (b *Block) SetHash() &#123;</span><br><span class="line"><span class="built_in">pow</span> := NewProofOfWork(b)</span><br><span class="line">_, <span class="built_in">hash</span> := <span class="built_in">pow</span>.Run()</span><br><span class="line">b.Hash = <span class="built_in">hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为<code>main.go</code>文件修改后的<code>main</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line"></span><br><span class="line">bc := NewBlockchain()</span><br><span class="line"></span><br><span class="line">bc.AddBlock(<span class="string">&quot;Send 1 BTC to Ivan&quot;</span>)</span><br><span class="line">bc.AddBlock(<span class="string">&quot;Send 2 more BTC to Ivan&quot;</span>)</span><br><span class="line"></span><br><span class="line">var hashInt big.Int</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, block := <span class="built_in">range</span> bc.blocks &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;PrevHash: %x\n&quot;</span>, block.PrevHash)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Data: %s\n&quot;</span>, block.Data)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Hash: %x\n&quot;</span>, block.Hash)</span><br><span class="line">hashInt.SetBytes(block.Hash[:])</span><br><span class="line"><span class="built_in">pow</span> := NewProofOfWork(block).Validate(hashInt)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Pow: &quot;</span> + strconv.FormatBool(<span class="built_in">pow</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Time using: &quot;</span>, time.Since(t))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第3次实验"><a href="#第3次实验" class="headerlink" title="第3次实验"></a>第3次实验</h2><h3 id="实验1：熟悉Bitcoin-Core的基本配置方法"><a href="#实验1：熟悉Bitcoin-Core的基本配置方法" class="headerlink" title="实验1：熟悉Bitcoin Core的基本配置方法"></a>实验1：熟悉Bitcoin Core的基本配置方法</h3><h4 id="1-1-熟悉比特币客户端的配置方法"><a href="#1-1-熟悉比特币客户端的配置方法" class="headerlink" title="1.1 熟悉比特币客户端的配置方法"></a>1.1 熟悉比特币客户端的配置方法</h4><p>思考题：</p><p>(1) 根据日志中的<code>* Using 8.0MiB for chain state database</code>可知，为存储链上交易状态而初始化的数据空间为8.0MiB；</p><p>(2) 根据日志中的<code>keypool added 2000 keys (1000 internal), size=2000 (1000 internal)</code>以及<code>keypool added 1 keys (0 internal), size=2000 (1000 internal)</code>可知，最终保存了2001对密钥；</p><p>(3) 加载<code>peer.dat</code>文件—&gt;加载<code>banlist.dat</code>文件—&gt;启动网络线程—&gt;从DNS种子中加载地址—&gt;添加修正的种子节点。</p><h4 id="1-2-学习bitcoin-conf的配置方法"><a href="#1-2-学习bitcoin-conf的配置方法" class="headerlink" title="1.2 学习bitcoin.conf的配置方法"></a>1.2 学习bitcoin.conf的配置方法</h4><p>alice的配置文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">regtest=1</span><br><span class="line">listen=1</span><br><span class="line">port=60000</span><br><span class="line">addnode=127.0.0.1:60002</span><br><span class="line">addnode=127.0.0.1:60004</span><br><span class="line"></span><br><span class="line">rpcport=60001</span><br><span class="line">rpcuser=alice</span><br><span class="line">rpcpassword=alice</span><br></pre></td></tr></table></figure><p>bob和network的配置类似，其中bob的port=60002, rpcport=60003, network的port=60004, rpcport=60005；</p><p>在3个命令行中运行bitcoind后，alice的<code>debug.log</code>文件显示3个节点连接成功，截图如下：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/9.jpg" class=""><h3 id="实验2-掌握常用RPC指令，利用回归测试网络实现挖矿与交易"><a href="#实验2-掌握常用RPC指令，利用回归测试网络实现挖矿与交易" class="headerlink" title="实验2: 掌握常用RPC指令，利用回归测试网络实现挖矿与交易"></a>实验2: 掌握常用RPC指令，利用回归测试网络实现挖矿与交易</h3><p>实验流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为alice生成比特币</span></span><br><span class="line">alice-cli generate <span class="number">50</span></span><br><span class="line">alice-cli generate <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生地址</span></span><br><span class="line">alice-cli getnewaddress</span><br><span class="line">bob-cli getnewaddress</span><br><span class="line">network-cli getnewaddress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向bob和network转账</span></span><br><span class="line">alice-cli sendtoaddress n1e6bsTvEPeAvzxaVDAU1mHzeMMfzkqX4Q</span><br><span class="line">alice-cli sendtoaddress mqFEmW3PArPU7bYvYbaSVZiEgwy32qgvGn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取承载上述交易的区块原始数据</span></span><br><span class="line">alice-cli gettransaction e32b8eb78aca04241b5a0b74c9b276b4caf67457f09aa0b42385096a97529727</span><br><span class="line">alice-cli gettransaction 79abb94ae33b6227b00fd3546e657850c3d23f01bcac205a8755d72778ce5143</span><br></pre></td></tr></table></figure><p>3个节点的余额如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/10.png" class=""><p>记录alice给bob转账的区块信息如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/11.png" class=""><p>记录alice给network转账的区块信息如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/12.png" class=""><h3 id="实验3-通过控制台与测试链进行更加丰富的交互"><a href="#实验3-通过控制台与测试链进行更加丰富的交互" class="headerlink" title="实验3: 通过控制台与测试链进行更加丰富的交互"></a>实验3: 通过控制台与测试链进行更加丰富的交互</h3><p>利用<code>decoderawtransaction</code>命令解码交易源数据，所得结果如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/13.jpg" class=""><p>思考题：</p><p>a. 输入是前一笔确认交易的输出，即以“296e”开头的<code>txid</code>；</p><p>​     输出是0.1BTC的转账金额以及0.0989BTC的找零金额。</p><p>b. 该交易的数据量大小为119Bytes。</p><h2 id="第4次实验"><a href="#第4次实验" class="headerlink" title="第4次实验"></a>第4次实验</h2><h3 id="实验1：区块链浏览器的基本操作与功能"><a href="#实验1：区块链浏览器的基本操作与功能" class="headerlink" title="实验1：区块链浏览器的基本操作与功能"></a>实验1：区块链浏览器的基本操作与功能</h3><p>(1)    在区块链浏览器中查询给出的区块，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/14.jpeg" class=""><p>该区块的异常：第二笔交易中存在5569个0.00001BTC的交易；</p><p>原因：该笔交易的BTC来源于5569次金额为0.00001BTC的转账，有可能是恶意的行为；</p><p>问题：可能会有恶意用户利用这种小金额、大数量的转账进行攻击。</p><p>(2)    比特币挖矿难度的可视化实时结果如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/15.jpeg" class=""><p>难度调整的间隔：约14天；</p><p>难度变化趋势：总体上来看难度呈上升趋势，但中间存在一定波动；</p><p>影响：使得计算越来越困难，算力不变的情况下，出块时间增大；</p><p>推测平均算力的计算方法：$\frac{难度\cdot 2^{32}}{平均出块时间}$</p><p>(3)    </p><p>a. 调用API的命令及结果如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/16.png" class=""><p>待验证交易数目：795；</p><p>数据量：228419 Bytes；</p><p>大概需要$\lceil \frac{228419}{1024^2}\rceil=1$个区块才能处理完。</p><p>b. 查询高度为9991-10000的区块的调用API命令及结果如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/17.png" class=""><p>可以发现10个区块的<code>tx_count</code>字段值都为1，因此高度在9991-10000之间的区块包含的总交易数目为10。</p><h3 id="实验2：利用区块链浏览器学习区块链账本层构造"><a href="#实验2：利用区块链浏览器学习区块链账本层构造" class="headerlink" title="实验2：利用区块链浏览器学习区块链账本层构造"></a>实验2：利用区块链浏览器学习区块链账本层构造</h3><ol><li><p>该脚本的解锁条件：设解锁脚本给出的数据为<code>a, b, c</code>，</p><p><code>OP_3DUP</code>—&gt;<code>a, b, c, a, b, c</code>，</p><p><code>OP_ADD</code>—&gt;<code>a, b, c, a, b+c</code></p><p><code>OP_PUSHNUM_9</code>—&gt;<code>a, b, c, a, b+c, 9</code></p><p><code>OP_EQUALVERIFY</code>—&gt;得到第一个解锁条件：<code>b+c = 9</code></p><p><code>OP_ADD</code>—&gt;<code>a, b, c+a</code></p><p><code>OP_PUSHNUM_7</code>—&gt;<code>a, b, c+a, 7</code></p><p><code>OP_EQUALVERIFY</code>—&gt;得到第二个解锁条件：<code>c+a = 7</code></p><p><code>OP_ADD</code>—&gt;<code>a+b</code></p><p><code>OP_PUSHNUM_8</code>—&gt;<code>a+b, 8</code></p><p><code>OP_EQUALVERIFY</code>—&gt;得到第三个解锁条件：<code>a+b = 8</code></p><p>综上所述，该脚本的解锁条件为：</p><script type="math/tex; mode=display">b+c = 9\\c+a = 7\\a+b = 8</script></li><li><p>运行机理：分两步进行。第一步：验证解锁脚本给出的赎回脚本内容，是否和对应输出脚本给出的赎回脚本哈希值匹配；第二步：执行赎回脚本，验证解锁脚本给出的签名是否正确。</p></li><li><p>解锁脚本：由该脚本的解锁条件可以解得：$a=3,\ b=5,\ c=4$</p><p>因此解锁脚本为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OP_PUSHNUM_3 OP_PUSHNUM_5 OP_PUSHNUM_4</span><br><span class="line">OP_PSHBYTES_7 6f938893889388</span><br></pre></td></tr></table></figure></li></ol><h3 id="实验3：利用区块链浏览器解析并学习区块链合约层构造"><a href="#实验3：利用区块链浏览器解析并学习区块链合约层构造" class="headerlink" title="实验3：利用区块链浏览器解析并学习区块链合约层构造"></a>实验3：利用区块链浏览器解析并学习区块链合约层构造</h3><p>查看区块详情：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/18.png" class=""><p>查看合约首页：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/19.png" class=""><p>查看最近事务：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/20.png" class=""><p>查看事务详情：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/21.png" class=""><p>学习总结：智能合约是在区块链上运行的程序。它的特点是区块的大小无上限，由事务费用上限Gaslimit决定，事务费用又与合约总复杂度有关。同时，执行一次智能合约需要支付Gas作为事务费用。以太坊制定的智能合约的经济模型降低了生态丧失中心性的风险。</p><h3 id="实验4：体验比特币靓号地址"><a href="#实验4：体验比特币靓号地址" class="headerlink" title="实验4：体验比特币靓号地址"></a>实验4：体验比特币靓号地址</h3><p>生成满足指定条件地址的命令及结果如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/22.png" class=""><h3 id="实验5：体验在线生成不同种类的钱包地址"><a href="#实验5：体验在线生成不同种类的钱包地址" class="headerlink" title="实验5：体验在线生成不同种类的钱包地址"></a>实验5：体验在线生成不同种类的钱包地址</h3><p>普通钱包的生成：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/23.png" class=""><p>纸钱包的生成：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/24.png" class=""><p>脑钱包的生成：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/25.png" class=""><h2 id="第5次实验"><a href="#第5次实验" class="headerlink" title="第5次实验"></a>第5次实验</h2><h3 id="实验1：Solidity基础"><a href="#实验1：Solidity基础" class="headerlink" title="实验1：Solidity基础"></a>实验1：Solidity基础</h3><h4 id="实验流程-6"><a href="#实验流程-6" class="headerlink" title="实验流程"></a>实验流程</h4><p>首先按照指导书所述流程编写代码，具体代码位于“代码”部分；</p><p>随后在右侧的“编译”一栏点击“开始编译”按钮，没有Error信息则编译通过；</p><p>选择右侧的“运行”一栏，选择想要的账号后点击“部署”，即可部署合约；</p><p>在“已部署的合约”中打开上述部署的合约，即“AnimalIncubators at 0x…”，其中“0x…”为选择的账号的地址；</p><p>在<code>createRandomAnimal</code>函数下输入参数值，再点击“transact”，即可完成交易；</p><p>最后在animals数组后输入索引，即可查看创建的宠物名称及其DNA。</p><h4 id="实验结果截图-6"><a href="#实验结果截图-6" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><p>创建的3个宠物及DNA如下所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/26.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/27.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/28.png" class=""><h4 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.12 &lt;0.6.0;</span><br><span class="line"></span><br><span class="line">contract AnimalIncubators is Ownable&#123;</span><br><span class="line">uint dnaDigits = 16;</span><br><span class="line">uint dnaLength = 10 ** dnaDigits;</span><br><span class="line">struct Animal &#123;</span><br><span class="line">string name;</span><br><span class="line">uint dna;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal[] public animals;</span><br><span class="line">event NewAnimal (uint AnimalId, string name, uint dna);</span><br><span class="line"></span><br><span class="line">function _createAnimal (string _name, uint _dna) private &#123;</span><br><span class="line">animals.push(Animal(_name, _dna));</span><br><span class="line">uint animalId = animals.length - 1;</span><br><span class="line">NewAnimal(animalId, _name, _dna);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _generateRandomDna (string _str) private view returns (uint) &#123;</span><br><span class="line">uint random = uint(keccak256(_str));</span><br><span class="line">return random % dnaLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createRandomAnimal (string _name) public &#123;</span><br><span class="line">uint randDna = _generateRandomDna(_name);</span><br><span class="line">_createAnimal(_name, randDna);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验2：Solidity进阶——宠物成长系统"><a href="#实验2：Solidity进阶——宠物成长系统" class="headerlink" title="实验2：Solidity进阶——宠物成长系统"></a>实验2：Solidity进阶——宠物成长系统</h3><h4 id="实验流程-7"><a href="#实验流程-7" class="headerlink" title="实验流程"></a>实验流程</h4><p>首先按照指导书所述流程编写代码，具体代码位于“代码”部分；</p><p>随后在右侧的“编译”一栏点击“开始编译”按钮，没有Error信息则编译通过；</p><p>选择右侧的“运行”一栏，选择想要的账号后点击“部署”，即可部署合约；</p><p>在“已部署的合约”中打开上述部署的合约，即“AnimalFeeding at 0x…”，其中“0x…”为选择的账号的地址；</p><p>按照实验1的步骤，使用3个不同的账号创建3只宠物，由于一个账户只能调用一次<code>createRandonAnimal</code>，因此若用同一账号连续点击两次“transact”，则会报错；</p><p>在<code>feedOnFood</code>函数下输入参数值，再点击“transact”，即可完成投喂，投喂后得到的新宠物添加在数组的末尾；</p><p>最后在animals数组后输入索引值：3，即可查看新宠物的名称及其DNA，要验证其主人与Dragon相同，只需使用不是Dragon主人的另外两个账户对新宠物No-one进行投喂，均会产生报错信息，则验证成功。</p><h4 id="实验结果截图-7"><a href="#实验结果截图-7" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><p>使用3个不同的账号创建3只宠物：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/29.png" class=""><p>对Dragon进行投喂，并查看产生的新宠物No-one：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/30.png" class=""><p>使用不是Dragon主人的另外两个账户对新宠物No-one进行投喂，产生报错信息：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/31.png" class=""><h4 id="实验代码-1"><a href="#实验代码-1" class="headerlink" title="实验代码"></a>实验代码</h4><p>对<code>AnimalIncubators.sol</code>文件作如下修改：（带有###的语句为添加或修改的语句）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mapping (uint =&gt; address) AnimalToOwner;###</span><br><span class="line">mapping (address =&gt; uint) ownerAnimalCount;###</span><br><span class="line"></span><br><span class="line">function _createAnimal (string _name, uint _dna) private &#123;</span><br><span class="line">animals.push(Animal(_name, _dna));</span><br><span class="line">uint animalId = animals.length - 1;</span><br><span class="line">AnimalToOwner[animalId] = msg.sender;###</span><br><span class="line">ownerAnimalCount[msg.sender]  += 1;###</span><br><span class="line">NewAnimal(animalId, _name, _dna);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createRandomAnimal (string _name) public &#123;</span><br><span class="line">require (ownerAnimalCount[msg.sender] == 0);###</span><br><span class="line">uint randDna = _generateRandomDna(_name);</span><br><span class="line">_createAnimal(_name, randDna);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建的<code>AnimalFeeding.sol</code>文件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.12 &lt;0.6.0;</span><br><span class="line">import  &quot;./AnimalIncubators.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract AnimalFeeding is AnimalIncubators&#123;</span><br><span class="line">function feedAndGrow (uint _AnimalId, uint _targetDna) public &#123;</span><br><span class="line">require (AnimalToOwner[_AnimalId] == msg.sender);</span><br><span class="line">Animal storage myAnimal = animals[_AnimalId];</span><br><span class="line">uint tmp = _targetDna % dnaDigits;</span><br><span class="line">uint newDna = (myAnimal.dna + tmp) / 2;</span><br><span class="line">newDna = newDna - newDna % 100 + 99;</span><br><span class="line">_createAnimal(&quot;No-one&quot;, newDna);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _catchFood(uint _name) internal pure returns (uint) &#123;</span><br><span class="line">uint rand = uint(keccak256(_name));</span><br><span class="line">return rand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function feedOnFood (uint _AnimalId, uint _FoodId) public &#123;</span><br><span class="line">uint foodDna = _catchFood(_FoodId);</span><br><span class="line">feedAndGrow(_AnimalId, foodDna);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="实验3：Solidity高阶理论"><a href="#实验3：Solidity高阶理论" class="headerlink" title="实验3：Solidity高阶理论"></a>实验3：Solidity高阶理论</h3><h4 id="实验流程-8"><a href="#实验流程-8" class="headerlink" title="实验流程"></a>实验流程</h4><p>首先按照指导书所述流程编写代码，具体代码位于“代码”部分；</p><p>随后在右侧的“编译”一栏点击“开始编译”按钮，没有Error信息则编译通过；</p><p>选择右侧的“运行”一栏，选择想要的账号后点击“部署”，即可部署合约；</p><p>在“已部署的合约”中打开上述部署的合约，即“AnimalFeeding at 0x…”，其中“0x…”为选择的账号的地址；</p><p>给<code>createRandomAnimal</code>添加onlyOnwer修饰符，先使用部署合约的用户调用该函数创建新宠物，随后切换另一账号创建新宠物，此时产生错误信息，因为该账号不是合约的部署账号，这是onlyOwner修饰符的作用（随后删掉该修饰符）；</p><p>切换回创建宠物的账号，调用<code>feedOnFood</code>函数投喂宠物，随后立马进行第二次投喂，可以发现第一次投喂成功，而第二次失败了，这是宠物冷却时间的作用结果；</p><p>最后调用<code>getAnimalsByOwner</code>函数，查看该账号的所有宠物，只需输入该账号的地址0x…，点击“transact”即可。</p><h4 id="实验结果截图-8"><a href="#实验结果截图-8" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><p>使用合约部署账号创建宠物成功，非合约部署账号创建失败：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/32.png" class=""><p>对宠物进行第一次投喂，投喂成功：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/33.png" class=""><p>快速进行第二次投喂，由于冷却时间导致失败：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/34.png" class=""><p>查看该账号的所有宠物：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/35.png" class=""><h4 id="实验代码-2"><a href="#实验代码-2" class="headerlink" title="实验代码"></a>实验代码</h4><p>对<code>AnimalIncubators.sol</code>文件作如下修改：（带有###的语句为添加或修改的语句）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &quot;./ownable.sol&quot;;</span><br><span class="line"></span><br><span class="line">uint32 coolDownTime = 1 minutes;</span><br><span class="line">struct Animal &#123;</span><br><span class="line">string name;</span><br><span class="line">uint dna;</span><br><span class="line">  uint32 level;###</span><br><span class="line">  uint32 readyTime;###</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _createAnimal (string _name, uint _dna) internal &#123;###</span><br><span class="line">animals.push(Animal(_name, _dna, 0, uint32(now)));###</span><br><span class="line">uint animalId = animals.length - 1;</span><br><span class="line">AnimalToOwner[animalId] = msg.sender;</span><br><span class="line">ownerAnimalCount[msg.sender]  += 1;</span><br><span class="line">NewAnimal(animalId, _name, _dna);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createRandomAnimal (string _name) public &#123;</span><br><span class="line">require (ownerAnimalCount[msg.sender] == 0);###</span><br><span class="line">uint randDna = _generateRandomDna(_name);</span><br><span class="line">_createAnimal(_name, randDna);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>AnimalFeeding.sol</code>文件作如下修改：（带有###的语句为添加或修改的语句）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function feedAndGrow (uint _AnimalId, uint _targetDna) internal &#123;###</span><br><span class="line">require (AnimalToOwner[_AnimalId] == msg.sender);</span><br><span class="line">Animal storage myAnimal = animals[_AnimalId];</span><br><span class="line">require (now &gt;= myAnimal.readyTime);###</span><br><span class="line">uint tmp = _targetDna % dnaDigits;</span><br><span class="line">uint newDna = (myAnimal.dna + tmp) / 2;</span><br><span class="line">newDna = newDna - newDna % 100 + 99;</span><br><span class="line">_createAnimal(&quot;No-one&quot;, newDna);</span><br><span class="line">myAnimal.readyTime = uint32(now) + coolDownTime;###</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建的<code>AnimalHelper.sol</code>文件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.12 &lt;0.6.0;</span><br><span class="line">import &quot;./AnimalFeeding.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract AnimalHelper is AnimalFeeding&#123;</span><br><span class="line">    modifier aboveLevel (uint _level, uint _AnimalId) &#123;</span><br><span class="line">        require (animals[_AnimalId].level &gt;= _level);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function changeName (uint _AnimalId, string _newName) external aboveLevel(2, _AnimalId) &#123;</span><br><span class="line">        require (msg.sender == AnimalToOwner[_AnimalId]);</span><br><span class="line">        animals[_AnimalId].name = _newName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function changeDna (uint _AnimalId, uint _newDna) external aboveLevel(20, _AnimalId) &#123;</span><br><span class="line">        require (msg.sender == AnimalToOwner[_AnimalId]);</span><br><span class="line">        animals[_AnimalId].dna = _newDna;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function getAnimalsByOwner (address _owner) external view returns (uint[])&#123;</span><br><span class="line">        uint[] memory result = new uint[](ownerAnimalCount[_owner]);</span><br><span class="line">        uint count = 0;</span><br><span class="line">        for (uint i=0; i&lt;animals.length; i++) &#123;</span><br><span class="line">            if (AnimalToOwner[i] == _owner) &#123;</span><br><span class="line">                result[count] = i;</span><br><span class="line">                count += 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第6次实验"><a href="#第6次实验" class="headerlink" title="第6次实验"></a>第6次实验</h2><h3 id="实验1：会议报名登记系统的基本功能与实现"><a href="#实验1：会议报名登记系统的基本功能与实现" class="headerlink" title="实验1：会议报名登记系统的基本功能与实现"></a>实验1：会议报名登记系统的基本功能与实现</h3><p><code>Enrollment.sol</code>文件添加的代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function delegate(address addr) public&#123;</span><br><span class="line">trustees[addr].push(participants[msg.sender]);</span><br><span class="line">&#125;</span><br><span class="line">function enrollFor(string memory username,string memory title) public returns(string memory)&#123;</span><br><span class="line">uint ind;</span><br><span class="line">for (uint i=0; i&lt;trustees[msg.sender].length; i++) &#123;</span><br><span class="line">if (keccak256(bytes(trustees[msg.sender][i].name)) == keccak256(bytes(username))) &#123;</span><br><span class="line">ind = i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (uint i=0; i&lt;conferences.length; i++)&#123;</span><br><span class="line">if (keccak256(bytes(conferences[i].title)) == keccak256(bytes(title)))&#123;</span><br><span class="line">require(conferences[i].current&lt;conferences[i].max,&quot;Enrolled full&quot;);</span><br><span class="line">conferences[i].current = conferences[i].current+1;</span><br><span class="line">if(conferences[i].current==conferences[i].max)&#123;</span><br><span class="line">emit ConferenceExpire(title);</span><br><span class="line">&#125;</span><br><span class="line">trustees[msg.sender][ind].confs.push(title);</span><br><span class="line">//emit MyNewConference(title);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">uint len = trustees[msg.sender][ind].confs.length;</span><br><span class="line">require(len&gt;0,&quot;Conference does not exist&quot;);</span><br><span class="line">return trustees[msg.sender][ind].confs[len-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1：</p><ol><li><p>应在合约的哪个函数指定管理员身份？如何指定？</p><p>应该在合约的构造函数制定；</p><p>将创建这个会议合约的人指定为管理员。</p></li><li><p>在发起新会议时，如何确定发起者是否为管理员？简述require()、assert()、revert()的区别。</p><p>通过<code>require(msg.sender == admin);</code>语句即可确定发起者是否为管理员；</p><p>同样作为判断一个条件是否满足的函数，require会退回剩下的gas；而assert会烧掉所有的gas；revert会撤回所有的状态转变。但它允许你返回一个值，且会把所有剩下的gas退回给caller</p></li><li><p>简述合约中用memory和storage声明变量的区别</p><p><code>Storage</code> 变量是指永久存储在<a href="https://so.csdn.net/so/search?q=区块链&amp;spm=1001.2101.3001.7020">区块链</a>中的变量。 <code>Memory</code> 变量则是临时的，当外部函数对某合约调用完成时，<a href="https://so.csdn.net/so/search?q=内存&amp;spm=1001.2101.3001.7020">内存</a>型变量即被移除</p></li></ol><h3 id="实验2：学习用Truffle组件测试和部署合约"><a href="#实验2：学习用Truffle组件测试和部署合约" class="headerlink" title="实验2：学习用Truffle组件测试和部署合约"></a>实验2：学习用Truffle组件测试和部署合约</h3><p>在完成Truffle的安装后，在一个文件夹中初始化一个以太坊项目，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/36.png" class=""><p>随后安装Ganache，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/37.png" class=""><p>在对配置文件进行配置之后，为合约编写测试文件，在测试文件中添加的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function testEnroll() public&#123;</span><br><span class="line">        Enrollment e = new Enrollment();</span><br><span class="line">        string memory corret = &quot;TestConf&quot;;</span><br><span class="line">        e.newConference(&quot;TestConf&quot;,&quot;Beijing&quot;,10);</span><br><span class="line">        Assert.equal(e.enroll(&quot;TestConf&quot;), corret, &quot;Something went wrong&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行测试之前，首先通过Ganache搭建一条私链，在Ganache中添加前面配置好的<code>truffle-config.js</code>文件，就能够得到一条新的私有链，并拥有10个账号，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/38.png" class=""><p>在完成Ganache私链的搭建后，在命令行中输入命令<code>truffle test</code>对合约文件进行测试，测试结果如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/39.png" class=""><p>完成测试后，重新搭建一条私链，并通过<code>truffle migrate</code>命令将合约部署到私链上，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/40.png" class=""><p>在Ganache中可以看到合约部署产生的区块、交易和日志记录，Blocks、Transactions、Logs记录如下所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/41.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/42.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/43.png" class=""><p>练习２：</p><p>​    合约的部署流程：首先编写好自己的合约文件，并对配置文件进行设置，随后根据配置文件来初始化本地的私有链，然后编写合约，随后对其进行编译，再将其部署到网络上。</p><h3 id="实验3：利用Web3-js实现合约与前端的结合"><a href="#实验3：利用Web3-js实现合约与前端的结合" class="headerlink" title="实验3：利用Web3.js实现合约与前端的结合"></a>实验3：利用Web3.js实现合约与前端的结合</h3><p>首先将前端代码补全，其中<code>delegate</code>部分补充的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract.<span class="property">methods</span>.<span class="title function_">delegate</span>(address)</span><br><span class="line">      .<span class="title function_">send</span>(&#123;<span class="attr">from</span>: <span class="variable language_">window</span>.<span class="property">web3</span>.<span class="property">eth</span>.<span class="property">accounts</span>[<span class="number">0</span>]&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><p><code>enrollFor</code>部分补充的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract.<span class="property">methods</span>.<span class="title function_">enrollFor</span>(username, title)</span><br><span class="line">      .<span class="title function_">send</span>(&#123;<span class="attr">from</span>: <span class="variable language_">window</span>.<span class="property">web3</span>.<span class="property">eth</span>.<span class="property">accounts</span>[<span class="number">0</span>]&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><p><code>myconf</code>部分补充的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract.<span class="property">methods</span>.<span class="title function_">queryMyConf</span>()</span><br><span class="line">    .<span class="title function_">call</span>(&#123;<span class="attr">from</span>:<span class="variable language_">window</span>.<span class="property">web3</span>.<span class="property">eth</span>.<span class="property">accounts</span>[<span class="number">0</span>]&#125;,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//将返回的数组依次压入data中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">loading</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.<span class="property">length</span>;i=i+<span class="number">1</span>)&#123;</span><br><span class="line">                data.<span class="title function_">push</span>(&#123;<span class="string">&#x27;title&#x27;</span>: res[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            data.<span class="title function_">push</span>(&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;no&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//更新状态，使页面数据重新渲染</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">loading</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>完成前端代码的编写之后，在Chrome浏览器中添加METAMASK扩展程序，并配置自定义RPC网络，将Ganache中的私链与之连接，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/44.png" class=""><p>在前端代码的文件夹中打开命令行窗口，并输入<code>npm start</code>命令来启动服务，如下图：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/45.png" class=""><p>在浏览器中输入<code>localhost:3000</code>访问前端，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/46.png" class=""><p>首先使用默认的账号，即首个账号，也是合约的拥有者，来注册一个用户，并创建一个新的会议，如下所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/47.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/48.png" class=""><p>在Conference List窗口中可以看见刚刚创建的新会议：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/49.png" class=""><p>随后通过私钥导入两个新的账户，并连接到网络，各自注册两个用户user2和user3：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/50.png" class=""><p>使用账户2报名会议：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/51.png" class=""><p>随后可以在My Conferences窗口中看到刚刚报名的会议：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/52.png" class=""><p>使用账户2，输入账户3的地址，委托给用户user3：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/53.png" class=""><p>使用账户3的用户user3为委托人user2报名一个会议：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/54.png" class=""><p>在账户2的user2中可以看到受托人帮忙报名的新会议：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/55.png" class=""><h2 id="选做实验（选做三）"><a href="#选做实验（选做三）" class="headerlink" title="选做实验（选做三）"></a>选做实验（选做三）</h2><h3 id="实验1：远程登录服务器"><a href="#实验1：远程登录服务器" class="headerlink" title="实验1：远程登录服务器"></a>实验1：远程登录服务器</h3><p>使用<code>ifconfig</code>命令查看IP地址，如下图所示：</p><p>Linux1：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/56.png" class=""><p>Linux2:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/57.png" class=""><p>安装SSH服务后，验证安装成功，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/58.png" class=""><p>通过PuTTY远程登录服务器，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/59.png" class=""><h3 id="实验2：依赖环境安装"><a href="#实验2：依赖环境安装" class="headerlink" title="实验2：依赖环境安装"></a>实验2：依赖环境安装</h3><p>通过apt包管理器安装Vim, Go, Git，安装成功后查看三者的版本，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/60.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/61.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/62.png" class=""><h3 id="实验3：安装IPFS"><a href="#实验3：安装IPFS" class="headerlink" title="实验3：安装IPFS"></a>实验3：安装IPFS</h3><p>成功安装IPFS后查看IPFS版本，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/63.png" class=""><h3 id="实验4：IPFS初始化"><a href="#实验4：IPFS初始化" class="headerlink" title="实验4：IPFS初始化"></a>实验4：IPFS初始化</h3><p>通过<code>ipfs init</code>命令对IPFS进行初始化，如下图所示：</p><p>Linux1:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/64.png" class=""><p>Linux2:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/65.png" class=""><h3 id="实验5：私有网络的共享密钥生成"><a href="#实验5：私有网络的共享密钥生成" class="headerlink" title="实验5：私有网络的共享密钥生成"></a>实验5：私有网络的共享密钥生成</h3><p>使用<code>ipfs-swarm-key-gen</code>生成密钥后，查看目录<code>~/.ipfs</code>中是否有生成的密钥文件，如下图所示：</p><p>Linux1:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/66.png" class=""><p>Linux2:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/67.png" class=""><h3 id="实验6：移除默认的Bootstrap节点"><a href="#实验6：移除默认的Bootstrap节点" class="headerlink" title="实验6：移除默认的Bootstrap节点"></a>实验6：移除默认的Bootstrap节点</h3><p>通过命令<code>ipfs bootstrap rm all</code>(版本更新以后不再使用-all参数，而是直接输入all即可)，如下图所示：</p><p>Linux1：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/68.png" class=""><p>Linux2：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/69.png" class=""><h3 id="实验7：启动节点服务"><a href="#实验7：启动节点服务" class="headerlink" title="实验7：启动节点服务"></a>实验7：启动节点服务</h3><p>首先在Linux1中启动节点服务：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/70.png" class=""><p>随后打开一个新的终端窗口，查看Linux1的ID：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/71.png" class=""><p>在Linux2中，使用<code>ipfs bootstrap add /ip4/192.168.1.63/tcp/4001/ipfs/XXX</code>命令(其中XXX为上图中的“ID”字段)，为Linux2添加Linux1节点，随后启动Linux2的节点服务：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/72.png" class=""><h3 id="实验8：测试数据抓包"><a href="#实验8：测试数据抓包" class="headerlink" title="实验8：测试数据抓包"></a>实验8：测试数据抓包</h3><p>(1)    </p><p>通过<code>ipfs bootstrap list</code>命令查看引导节点列表：</p><p>Linux1:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/73.png" class=""><p>Linux2:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/74.png" class=""><p>通过<code>ipfs swarm peers</code>命令查看已连接的其他IPFS节点：</p><p>Linux1:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/75.png" class=""><p>Linux2:</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/76.png" class=""><p>在本地节点添加目录使用的命令为：<code>ipfs add</code></p><p>在本地节点查看存储的文件使用的命令为：<code>ipfs files ls</code></p><p>在本地节点下载文件使用的命令为：<code>ipfs get</code></p><p>在本地节点删除文件使用的命令为：<code>ipfs files rm</code></p><p>(2)    </p><p>在Linux1中建立文件并添加到IPFS网络，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/77.png" class=""><p>在Linux2中使用<code>ipfs cat</code>命令可以查看该文件内容，如下图所示：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/78.png" class=""><p>在上述通讯过程中，通过Wireshark软件抓取到的数据包如下：</p><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/79.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/80.png" class=""><img src="/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/81.png" class="">]]></content:encoded>
      
      
      <category domain="http://yunsaijc.top/categories/%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/">实验记录</category>
      
      
      <category domain="http://yunsaijc.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/">网络安全</category>
      
      <category domain="http://yunsaijc.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/">区块链</category>
      
      <category domain="http://yunsaijc.top/tags/%E5%AE%9E%E9%AA%8C/">实验</category>
      
      
      <comments>http://yunsaijc.top/2022/10/15/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
