<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yunsaijc&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Enjoy</description>
    <pubDate>Sat, 15 Oct 2022 05:38:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>区块链第1次实验报告</title>
      <link>http://example.com/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</link>
      <guid>http://example.com/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</guid>
      <pubDate>Fri, 14 Oct 2022 16:07:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;区块链第1次实验报告&quot;&gt;&lt;a href=&quot;#区块链第1次实验报告&quot; class=&quot;headerlink&quot; title=&quot;区块链第1次实验报告&quot;&gt;&lt;/a&gt;区块链第1次实验报告&lt;/h2&gt;&lt;h3 id=&quot;实验1：求3个数的最小公倍数&quot;&gt;&lt;a href=&quot;#实验1：求3个</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="区块链第1次实验报告"><a href="#区块链第1次实验报告" class="headerlink" title="区块链第1次实验报告"></a>区块链第1次实验报告</h2><h3 id="实验1：求3个数的最小公倍数"><a href="#实验1：求3个数的最小公倍数" class="headerlink" title="实验1：求3个数的最小公倍数"></a>实验1：求3个数的最小公倍数</h3><h4 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h4><p>对于两个数a和b，在实现时使用如下原理来求得他们的最小公倍数（记为lcm，其中gcd为两数的最大公因子）：<br>$$<br>lcm &#x3D; \frac{a \cdot b}{gcd}<br>$$<br>因此对于3个数a，b，c来说，只需先求出a和b的最小公倍数x，b和c的最小公倍数y，再求出x和y的最小公倍数即为3个数的最小公倍数；</p><p>或者，直接求出3个数的最大公因子gcd，通过公式(1)的方法也可以求得同样的结果：$lcm&#x3D;\frac{a\cdot b \cdot c}{gcd}$。</p><p>本题采用的是第一种方法。</p><h4 id="实验结果截图"><a href="#实验结果截图" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/1.png" class=""><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="type">int</span></span><br><span class="line">fmt.Scanf(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c)</span><br><span class="line"><span class="keyword">if</span> a*b*c == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Wrong number !&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d1 := gcd(a, b)</span><br><span class="line">d2 := gcd(b, c)</span><br><span class="line">x1 := <span class="type">int</span>(a * b / d1)</span><br><span class="line">x2 := <span class="type">int</span>(b * c / d2)</span><br><span class="line"></span><br><span class="line">d3 := gcd(x1, x2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, <span class="type">int</span>(x1*x2/d3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> a%b == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h3><h4 id="实验流程-1"><a href="#实验流程-1" class="headerlink" title="实验流程"></a>实验流程</h4><p>本题流程较为简单，只需按照流程图所示进行哈希运算即可，但需要注意数据的格式转换问题。</p><p>在一开始处理十六进制字符串时，先将字符串通过<code>hex.DecodeString</code>方法转换为字节数组<code>[]byte</code>。</p><p>在中间的运算过程中，为方便起见，始终采用字节数组的方式。</p><p>最后直接通过<code>base58.Encode</code>方法对得到的字节数组进行编码即可得到最终结果。</p><h4 id="实验结果截图-1"><a href="#实验结果截图-1" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><img src="/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/2.png" class=""><img src="/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/3.png" class=""><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成比特币测试网地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;base58&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/ripemd160&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">prevb := <span class="string">&quot;6f&quot;</span></span><br><span class="line">prekey := <span class="string">&quot;02b1ebcdbac723f7444fdfb8e83b13bd14fe679c59673a519df6a1038c07b719c6&quot;</span></span><br><span class="line"><span class="comment">// prekey := &quot;036e69a3e7c303935403d5b96c47b7c4fa8a80ca569735284a91d930f0f49afa86&quot;</span></span><br><span class="line">vb, _ := hex.DecodeString(prevb)</span><br><span class="line">key, _ := hex.DecodeString(prekey)</span><br><span class="line"></span><br><span class="line">tmp1 := sha256.Sum256(key)</span><br><span class="line"></span><br><span class="line">rip := ripemd160.New()</span><br><span class="line">rip.Write(tmp1[:])</span><br><span class="line">fp := rip.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">append</span>(vb, fp...)</span><br><span class="line"></span><br><span class="line">tmp2 := sha256.Sum256(fp)</span><br><span class="line"></span><br><span class="line">ck := sha256.Sum256(tmp2[:])</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">append</span>(fp, ck[:<span class="number">4</span>]...)</span><br><span class="line"></span><br><span class="line">myAb := base58.NewAlphabet(<span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>)</span><br><span class="line">result := base58.Encode(fp, myAb)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h3><h4 id="实验流程-2"><a href="#实验流程-2" class="headerlink" title="实验流程"></a>实验流程</h4><p>首先需要自定义一个结构体，代表树中的节点。新建16个叶节点，并为他们分别赋予一个字符串。</p><p>随后需要构建二叉树。本题采用类似Huffman码树的建树方法：先将16个叶节点放入一个队列中，每次取出最后两个节点构成一个新节点插入队列头部，直至队列只剩下一个元素为止，该元素即整棵树的根节点。</p><p>对于每个节点的Hash值。在未对节点作出改变时（即刚构建二叉树时），可以在建树的同时计算Hash值并存储到节点当中；在对节点作出改变之后，可以采用后序遍历的方法对每个节点的Hash值进行重新计算，如代码中的<code>calHash</code>函数所示。</p><p>最后需要找出作出改变的节点。如果一个节点作出了改变，那么该节点的所有长辈节点（即父节点，祖父节点，曾祖父节点等等…）一直到根节点的Hash值都会发生改变。因此只需要从根节点进行前序遍历，一直沿着Hash值发生了改变的节点寻找下去，知道找到一个叶节点，那么该叶节点即为发生改变的节点。</p><h4 id="实验结果截图-2"><a href="#实验结果截图-2" class="headerlink" title="实验结果截图"></a>实验结果截图</h4><p>前序遍历的部分输出如下：</p><img src="/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/4.png" class=""><p>找出改变的节点输出如下，该ID代表的节点可以参考Huffman编码的构造方法：</p><img src="/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/5.png" class=""><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Merkle Tree</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">leaf             <span class="type">bool</span><span class="comment">// 标识该节点是否为叶节点</span></span><br><span class="line">ID, str          <span class="type">string</span><span class="comment">// ID用于标识用户，str为内容</span></span><br><span class="line">oldHash, hashVal [<span class="number">32</span>]<span class="type">byte</span><span class="comment">// oldHash用于重新计算之后的hashVal进行对比以判断是否改变</span></span><br><span class="line">left, right      *node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n node)</span></span> printMsg() &#123;</span><br><span class="line">fmt.Print(n.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n node)</span></span> printHash() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%x&quot;</span>, n.hashVal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新计算整棵树的Hash值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *node)</span></span> calHash() &#123;</span><br><span class="line"><span class="keyword">if</span> r == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">r.left.calHash()</span><br><span class="line">r.right.calHash()</span><br><span class="line">r.oldHash = r.hashVal</span><br><span class="line"><span class="keyword">if</span> r.leaf &#123;</span><br><span class="line">tmp, _ := hex.DecodeString(r.str)</span><br><span class="line">r.hashVal = sha256.Sum256(tmp)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r.hashVal = addHash(r.left.hashVal, r.right.hashVal)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> queue []*node</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">16</span>; i++ &#123;</span><br><span class="line">newNode := &amp;node&#123;leaf: <span class="literal">true</span>, str: strconv.Itoa(<span class="number">77</span>*i + <span class="number">78</span>)&#125;</span><br><span class="line">tmp, _ := hex.DecodeString(newNode.str)</span><br><span class="line">newNode.hashVal = sha256.Sum256(tmp)</span><br><span class="line">queue = <span class="built_in">append</span>(queue, newNode)</span><br><span class="line">&#125;</span><br><span class="line">root := buildTree(queue)</span><br><span class="line">preOrderID(root, <span class="string">&quot;&quot;</span>)</span><br><span class="line">preOrder(root)</span><br><span class="line">fmt.Print()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改其中一个叶节点</span></span><br><span class="line"><span class="comment">// tmpNode := root</span></span><br><span class="line"><span class="comment">// for tmpNode.right != nil &#123;</span></span><br><span class="line"><span class="comment">// tmpNode = tmpNode.right</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">tmpNode := root.left.left.left.right</span><br><span class="line"><span class="comment">// root.right.hashVal = sha256.Sum256([]byte&#123;12&#125;)</span></span><br><span class="line">tmpNode.str = <span class="string">&quot;blrblrblr&quot;</span></span><br><span class="line"></span><br><span class="line">root.calHash()</span><br><span class="line">preOrder(root)</span><br><span class="line"></span><br><span class="line">compareMerkleTree(root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(queue []*node)</span></span> *node &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">1</span> &#123;</span><br><span class="line">l := <span class="built_in">len</span>(queue)</span><br><span class="line">left, right := queue[l<span class="number">-2</span>], queue[l<span class="number">-1</span>]</span><br><span class="line">queue = queue[:l<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">tmp := &amp;node&#123;leaf: <span class="literal">false</span>, left: left, right: right&#125;</span><br><span class="line">tmp.hashVal = addHash(left.hashVal, right.hashVal)</span><br><span class="line">queue = <span class="built_in">append</span>([]*node&#123;tmp&#125;, queue...)</span><br><span class="line">&#125;</span><br><span class="line">root := queue[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个Hash值相加并返回该值的Hash结果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addHash</span><span class="params">(a, b [32]<span class="type">byte</span>)</span></span> [<span class="number">32</span>]<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">var</span> tmp [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">32</span>; i++ &#123;</span><br><span class="line">tmp[i] = a[i] + b[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var tmpStr stirng = &quot;&quot;</span></span><br><span class="line"><span class="comment">// for i := 0; i &lt; 32; i++ &#123;</span></span><br><span class="line"><span class="comment">// tmpStr += strconv.FormatInt(tmp[i], 16)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// tmpStr := fmt.Sprintf(&quot;%x&quot;, binary.BigEndian.Uint32(tmp[:]))</span></span><br><span class="line"><span class="comment">// result := sha256.Sum256([]byte(tmpStr))</span></span><br><span class="line">result := sha256.Sum256(tmp[:])</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历，赋予每个节点相应的ID。根节点ID为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrderID</span><span class="params">(root *node, s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root.ID = s</span><br><span class="line">preOrderID(root.left, s+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">preOrderID(root.right, s+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(root *node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;ID: &quot;</span> + root.ID + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> root.leaf &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Leaf: \t&quot;</span>)</span><br><span class="line">root.printMsg()</span><br><span class="line">fmt.Print(<span class="string">&quot;\n\t\t&quot;</span>)</span><br><span class="line">root.printHash()</span><br><span class="line">fmt.Print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Not leaf: \t&quot;</span>)</span><br><span class="line">root.printHash()</span><br><span class="line">fmt.Print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">preOrder(root.left)</span><br><span class="line">preOrder(root.right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较改变节点前后的Hash值，找出改变的节点的ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compareMerkleTree</span><span class="params">(root *node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(root.oldHash == root.hashVal)</span></span><br><span class="line"><span class="keyword">if</span> !root.leaf &#123;</span><br><span class="line"><span class="keyword">if</span> root.left.oldHash != root.left.hashVal &#123;</span><br><span class="line">compareMerkleTree(root.left)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">compareMerkleTree(root.right)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Adversary&#x27;s ID is: &quot;</span> + root.ID)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/">实验报告</category>
      
      
      <category domain="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/">网络安全</category>
      
      <category domain="http://example.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/">区块链</category>
      
      <category domain="http://example.com/tags/%E5%AE%9E%E9%AA%8C/">实验</category>
      
      
      <comments>http://example.com/2022/10/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%AC1%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2022/10/09/hello-world/</link>
      <guid>http://example.com/2022/10/09/hello-world/</guid>
      <pubDate>Sun, 09 Oct 2022 13:05:18 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/10/09/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
